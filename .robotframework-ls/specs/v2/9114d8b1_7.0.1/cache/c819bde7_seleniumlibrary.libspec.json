mtime:1721728162.1951032
{"name": "SeleniumLibrary", "doc": "SeleniumLibrary is a web testing library for Robot Framework.\n\n\nThis document explains how to use keywords provided by SeleniumLibrary. For information about installation, support, and more, please visit the [project pages](https://github.com/robotframework/SeleniumLibrary). For more information about Robot Framework, see [http://robotframework.org](http://robotframework.org).\n\n\nSeleniumLibrary uses the Selenium WebDriver modules internally to control a web browser. See [http://seleniumhq.org](http://seleniumhq.org) for more information about Selenium in general and SeleniumLibrary README.rst [Browser drivers chapter](https://github.com/robotframework/SeleniumLibrary\\#browser-drivers) for more details about WebDriver binary installation.\n\n\n- `Locating elements`\n- `Browser and Window`\n- `Timeouts, waits, and delays`\n- `Run-on-failure functionality`\n- `Boolean arguments`\n- `EventFiringWebDriver`\n- `Thread support`\n- `Plugins`\n- `Importing`\n- `Keywords`\n\n\n## Locating elements\n\nAll keywords in SeleniumLibrary that need to interact with an element on a web page take an argument typically named `locator` that specifies how to find the element. Most often the locator is given as a string using the locator syntax described below, but `using WebElements` is possible too.\n\n\n### Locator syntax\n\nSeleniumLibrary supports finding elements based on different strategies such as the element id, XPath expressions, or CSS selectors. The strategy can either be explicitly specified with a prefix or the strategy can be implicit.\n\n\n#### Default locator strategy\n\nBy default, locators are considered to use the keyword specific default locator strategy. All keywords support finding elements based on `id` and `name` attributes, but some keywords support additional attributes or other values that make sense in their context. For example, `Click Link` supports the `href` attribute and the link text and addition to the normal `id` and `name`.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Click Element` | example | \\# Match based on `id` or `name`. |\n| `Click Link` | example | \\# Match also based on link text and `href`. |\n| `Click Button` | example | \\# Match based on `id`, `name` or `value`. |\n\n\nIf a locator accidentally starts with a prefix recognized as `explicit locator strategy` or `implicit XPath strategy`, it is possible to use the explicit `default` prefix to enable the default strategy.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Click Element` | name:foo | \\# Find element with name `foo`. |\n| `Click Element` | default:name:foo | \\# Use default strategy with value `name:foo`. |\n| `Click Element` | //foo | \\# Find element using XPath `//foo`. |\n| `Click Element` | default: //foo | \\# Use default strategy with value `//foo`. |\n\n\n#### Explicit locator strategy\n\nThe explicit locator strategy is specified with a prefix using either syntax `strategy:value` or `strategy=value`. The former syntax is preferred because the latter is identical to Robot Framework's [named argument syntax](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html\\#named-argument-syntax) and that can cause problems. Spaces around the separator are ignored, so `id:foo`, `id: foo` and `id : foo` are all equivalent.\n\n\nLocator strategies that are supported by default are listed in the table below. In addition to them, it is possible to register `custom locators`.\n\n\n| Strategy | Match based on | Example |\n| :--- | :--- | :--- |\n| id | Element `id`. | `id:example` |\n| name | `name` attribute. | `name:example` |\n| identifier | Either `id` or `name`. | `identifier:example` |\n| class | Element `class`. | `class:example` |\n| tag | Tag name. | `tag:div` |\n| xpath | XPath expression. | `xpath://div[@id=\"example\"]` |\n| css | CSS selector. | `css:div\\#example` |\n| dom | DOM expression. | `dom:document.images[5]` |\n| link | Exact text a link has. | `link:The example` |\n| partial link | Partial link text. | `partial link:he ex` |\n| sizzle | Sizzle selector deprecated. | `sizzle:div.example` |\n| data | Element `data-*` attribute | `data:id:my_id` |\n| jquery | jQuery expression. | `jquery:div.example` |\n| default | Keyword specific default behavior. | `default:example` |\n\n\nSee the `Default locator strategy` section below for more information about how the default strategy works. Using the explicit `default` prefix is only necessary if the locator value itself accidentally matches some of the explicit strategies.\n\n\nDifferent locator strategies have different pros and cons. Using ids, either explicitly like `id:foo` or by using the `default locator strategy` simply like `foo`, is recommended when possible, because the syntax is simple and locating elements by id is fast for browsers. If an element does not have an id or the id is not stable, other solutions need to be used. If an element has a unique tag name or class, using `tag`, `class` or `css` strategy like `tag:h1`, `class:example` or `css:h1.example` is often an easy solution. In more complex cases using XPath expressions is typically the best approach. They are very powerful but a downside is that they can also get complex.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Click Element` | id:foo | \\# Element with id 'foo'. |\n| `Click Element` | css:div\\#foo h1 | \\# h1 element under div with id 'foo'. |\n| `Click Element` | xpath: //div[@id=\"foo\"]//h1 | \\# Same as the above using XPath, not CSS. |\n| `Click Element` | xpath: //*[contains(text(), \"example\")] | \\# Element containing text 'example'. |\n\n\n**NOTE:**\n\n\n- The `strategy:value` syntax is only supported by SeleniumLibrary 3.0 and newer.\n- Using the `sizzle` strategy or its alias `jquery` requires that the system under test contains the jQuery library.\n- Prior to SeleniumLibrary 3.0, table related keywords only supported `xpath`, `css` and `sizzle/jquery` strategies.\n- `data` strategy is conveniance locator that will construct xpath from the parameters. If you have element like `\\<div data-automation=\"automation-id-2\">`, you locate the element via `data:automation:automation-id-2`. This feature was added in SeleniumLibrary 5.2.0\n\n\n#### Implicit XPath strategy\n\nIf the locator starts with `//`  or multiple opening parenthesis in front of the `//`, the locator is considered to be an XPath expression. In other words, using `//div` is equivalent to using explicit `xpath://div` and `((//div))` is equivalent to using explicit `xpath:((//div))`\n\n\nExamples:\n\n\n|  |  |\n| :--- | :--- |\n| `Click Element` | //div[@id=\"foo\"]//h1 |\n| `Click Element` | (//div)[2] |\n\n\nThe support for the `(//` prefix is new in SeleniumLibrary 3.0. Supporting multiple opening parenthesis is new in SeleniumLibrary 5.0.\n\n\n#### Chaining locators\n\nIt is possible chain multiple locators together as single locator. Each chained locator must start with locator strategy. Chained locators must be separated with single space, two greater than characters and followed with space. It is also possible mix different locator strategies, example css or xpath. Also a list can also be used to specify multiple locators. This is useful, is some part of locator would match as the locator separator but it should not. Or if there is need to existing WebElement as locator.\n\n\nAlthough all locators support chaining, some locator strategies do not abey the chaining. This is because some locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context and not for the element found be the previous locator. Chaining is supported by locator strategies which are based on Selenium API, like `xpath` or `css`, but example chaining is not supported by `sizzle` or `jquery\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Click Element` | css:.bar >> [xpath://a](xpath://a) | \\# To find a link which is present after an element with class \"bar\" |\n\n\nList examples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${locator_list} = | `Create List` | css:div\\#div_id | [xpath://*[text(](xpath://*[text()), \" >> \"] |\n| `Page Should Contain Element` | ${locator_list} |  |  |\n| ${element} = | Get WebElement | [xpath://*[text(](xpath://*[text()), \" >> \"] |  |\n| ${locator_list} = | `Create List` | css:div\\#div_id | ${element} |\n| `Page Should Contain Element` | ${locator_list} |  |  |\n\n\nChaining locators in new in SeleniumLibrary 5.0\n\n\n### Using WebElements\n\nIn addition to specifying a locator as a string, it is possible to use Selenium's WebElement objects. This requires first getting a WebElement, for example, by using the `Get WebElement` keyword.\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${elem} = | `Get WebElement` | id:example |\n| `Click Element` | ${elem} |  |\n\n\n### Custom locators\n\nIf more complex lookups are required than what is provided through the default locators, custom lookup strategies can be created. Using custom locators is a two part process. First, create a keyword that returns a WebElement that should be acted on:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| Custom Locator Strategy | [Arguments] | ${browser} | ${locator} | ${tag} | ${constraints} |\n|  | ${element}= | Execute Javascript | return window.document.getElementById('${locator}'); |  |  |\n|  | [Return] | ${element} |  |  |  |\n\n\nThis keyword is a reimplementation of the basic functionality of the `id` locator where `${browser}` is a reference to a WebDriver instance and `${locator}` is the name of the locator strategy. To use this locator, it must first be registered by using the `Add Location Strategy` keyword:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Add Location Strategy` | custom | Custom Locator Strategy |\n\n\nThe first argument of `Add Location Strategy` specifies the name of the strategy and it must be unique. After registering the strategy, the usage is the same as with other locators:\n\n\n|  |  |\n| :--- | :--- |\n| `Click Element` | custom:example |\n\n\nSee the `Add Location Strategy` keyword for more details.\n\n\n## Browser and Window\n\nThere is different conceptual meaning when SeleniumLibrary talks about windows or browsers. This chapter explains those differences.\n\n\n### Browser\n\nWhen `Open Browser` or `Create WebDriver` keyword is called, it will create a new Selenium WebDriver instance by using the [Selenium WebDriver](https://www.seleniumhq.org/docs/03_webdriver.jsp) API. In SeleniumLibrary terms, a new browser is created. It is possible to start multiple independent browsers (Selenium Webdriver instances) at the same time, by calling `Open Browser` or `Create WebDriver` multiple times. These browsers are usually independent of each other and do not share data like cookies, sessions or profiles. Typically when the browser starts, it creates a single window which is shown to the user.\n\n\n### Window\n\nWindows are the part of a browser that loads the web site and presents it to the user. All content of the site is the content of the window. Windows are children of a browser. In SeleniumLibrary browser is a synonym for WebDriver instance. One browser may have multiple windows. Windows can appear as tabs, as separate windows or pop-ups with different position and size. Windows belonging to the same browser typically share the sessions detail, like cookies. If there is a need to separate sessions detail, example login with two different users, two browsers (Selenium WebDriver instances) must be created. New windows can be opened example by the application under test or by example `Execute Javascript` keyword:\n\n\n```text\n`Execute Javascript`    window.open()    # Opens a new window with location about:blank\n```\n\nThe example below opens multiple browsers and windows, to demonstrate how the different keywords can be used to interact with browsers, and windows attached to these browsers.\n\n\nStructure:\n\n\n```text\nBrowserA\n           Window 1  (location=https://robotframework.org/)\n           Window 2  (location=https://robocon.io/)\n           Window 3  (location=https://github.com/robotframework/)\n\nBrowserB\n           Window 1  (location=https://github.com/)\n```\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Open Browser` | [https://robotframework.org](https://robotframework.org) | ${BROWSER} | alias=BrowserA | \\# BrowserA with first window is opened. |\n| `Execute Javascript` | window.open() |  |  | \\# In BrowserA second window is opened. |\n| `Switch Window` | locator=NEW |  |  | \\# Switched to second window in BrowserA |\n| `Go To` | [https://robocon.io](https://robocon.io) |  |  | \\# Second window navigates to robocon site. |\n| `Execute Javascript` | window.open() |  |  | \\# In BrowserA third window is opened. |\n| ${handle} | `Switch Window` | locator=NEW |  | \\# Switched to third window in BrowserA |\n| `Go To` | [https://github.com/robotframework/](https://github.com/robotframework/) |  |  | \\# Third windows goes to robot framework github site. |\n| `Open Browser` | [https://github.com](https://github.com) | ${BROWSER} | alias=BrowserB | \\# BrowserB with first windows is opened. |\n| ${location} | `Get Location` |  |  | \\# ${location} is: [https://www.github.com](https://www.github.com) |\n| `Switch Window` | ${handle} | browser=BrowserA |  | \\# BrowserA second windows is selected. |\n| ${location} | `Get Location` |  |  | \\# ${location} = [https://robocon.io/](https://robocon.io/) |\n| @{locations 1} | `Get Locations` |  |  | \\# By default, lists locations under the currectly active browser (BrowserA). |\n| @{locations 2} | `Get Locations` | browser=ALL |  | \\# By using browser=ALL argument keyword list all locations from all browsers. |\n\n\nThe above example, @{locations 1} contains the following items: [https://robotframework.org/](https://robotframework.org/), [https://robocon.io/](https://robocon.io/) and [https://github.com/robotframework/](https://github.com/robotframework/)'. The @{locations 2} contains the following items: [https://robotframework.org/](https://robotframework.org/), [https://robocon.io/](https://robocon.io/), [https://github.com/robotframework/](https://github.com/robotframework/)' and '[https://github.com/](https://github.com/).\n\n\n## Timeouts, waits, and delays\n\nThis section discusses different ways how to wait for elements to appear on web pages and to slow down execution speed otherwise. It also explains the `time format` that can be used when setting various timeouts, waits, and delays.\n\n\n### Timeout\n\nSeleniumLibrary contains various keywords that have an optional `timeout` argument that specifies how long these keywords should wait for certain events or actions. These keywords include, for example, `Wait ...` keywords and keywords related to alerts. Additionally `Execute Async Javascript`. Although it does not have `timeout`, argument, uses a timeout to define how long asynchronous JavaScript can run.\n\n\nThe default timeout these keywords use can be set globally either by using the `Set Selenium Timeout` keyword or with the `timeout` argument when `importing` the library. If no default timeout is set globally, the default is 5 seconds. If None is specified for the timeout argument in the keywords, the default is used. See `time format` below for supported timeout syntax.\n\n\n### Implicit wait\n\nImplicit wait specifies the maximum time how long Selenium waits when searching for elements. It can be set by using the `Set Selenium Implicit Wait` keyword or with the `implicit_wait` argument when `importing` the library. See [Selenium documentation](https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp) for more information about this functionality.\n\n\nSee `time format` below for supported syntax.\n\n\n### Page load\n\nPage load timeout is the amount of time to wait for page load to complete until a timeout exception is raised.\n\n\nThe default page load timeout can be set globally when `importing` the library with the `page_load_timeout` argument or by using the `Set Selenium Page Load Timeout` keyword.\n\n\nSee `time format` below for supported timeout syntax.\n\n\nSupport for page load is new in SeleniumLibrary 6.1\n\n\n### Selenium speed\n\nSelenium execution speed can be slowed down globally by using `Set Selenium speed` keyword. This functionality is designed to be used for demonstrating or debugging purposes. Using it to make sure that elements appear on a page is not a good idea. The above-explained timeouts and waits should be used instead.\n\n\nSee `time format` below for supported syntax.\n\n\n### Time format\n\nAll timeouts and waits can be given as numbers considered seconds (e.g. `0.5` or `42`) or in Robot Framework's time syntax (e.g. `1.5 seconds` or `1 min 30 s`). For more information about the time syntax see the [Robot Framework User Guide](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html\\#time-format).\n\n\n## Run-on-failure functionality\n\nSeleniumLibrary has a handy feature that it can automatically execute a keyword if any of its own keywords fails. By default, it uses the `Capture Page Screenshot` keyword, but this can be changed either by using the `Register Keyword To Run On Failure` keyword or with the `run_on_failure` argument when `importing` the library. It is possible to use any keyword from any imported library or resource file.\n\n\nThe run-on-failure functionality can be disabled by using a special value `NOTHING` or anything considered false (see `Boolean arguments`) such as `NONE`.\n\n\n## Boolean arguments\n\nStarting from 5.0 SeleniumLibrary relies on Robot Framework to perform the boolean conversion based on keyword arguments [type hint](https://docs.python.org/3/library/typing.html). More details in Robot Framework [user guide](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html\\#supported-conversions)\n\n\nPlease note SeleniumLibrary 3 and 4 did have own custom methods to covert arguments to boolean values.\n\n\n## EventFiringWebDriver\n\nThe SeleniumLibrary offers support for [EventFiringWebDriver](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html\\#module-selenium.webdriver.support.event_firing_webdriver). See the Selenium and SeleniumLibrary [EventFiringWebDriver support](https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst\\#EventFiringWebDriver) documentation for further details.\n\n\nEventFiringWebDriver is new in SeleniumLibrary 4.0\n\n\n## Thread support\n\nSeleniumLibrary is not thread-safe. This is mainly due because the underlying [Selenium tool is not thread-safe](https://github.com/SeleniumHQ/selenium/wiki/Frequently-Asked-Questions\\#q-is-webdriver-thread-safe) within one browser/driver instance. Because of the limitation in the Selenium side, the keywords or the API provided by the SeleniumLibrary is not thread-safe.\n\n\n## Plugins\n\nSeleniumLibrary offers plugins as a way to modify and add library keywords and modify some of the internal functionality without creating a new library or hacking the source code. See [plugin API](https://github.com/robotframework/SeleniumLibrary/blob/master/docs/extending/extending.rst\\#Plugins) documentation for further details.\n\n\nPlugin API is new SeleniumLibrary 4.0\n\n", "version": "6.3.0", "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\__init__.py", "lineno": 58, "tags": [], "inits": [{"name": "__init__", "args": [{"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout=0:00:05", "required": true, "defaultValue": "0:00:05", "types": [], "typedocs": []}, {"name": "implicit_wait", "kind": "POSITIONAL_OR_NAMED", "repr": "implicit_wait=0:00:00", "required": true, "defaultValue": "0:00:00", "types": [], "typedocs": []}, {"name": "run_on_failure", "kind": "POSITIONAL_OR_NAMED", "repr": "run_on_failure=Capture Page Screenshot", "required": true, "defaultValue": "Capture Page Screenshot", "types": [], "typedocs": []}, {"name": "screenshot_root_directory", "kind": "POSITIONAL_OR_NAMED", "repr": "screenshot_root_directory: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "plugins", "kind": "POSITIONAL_OR_NAMED", "repr": "plugins: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "event_firing_webdriver", "kind": "POSITIONAL_OR_NAMED", "repr": "event_firing_webdriver: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "page_load_timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "page_load_timeout=0:05:00", "required": true, "defaultValue": "0:05:00", "types": [], "typedocs": []}, {"name": "action_chain_delay", "kind": "POSITIONAL_OR_NAMED", "repr": "action_chain_delay=0:00:00.250000", "required": true, "defaultValue": "0:00:00.250000", "types": [], "typedocs": []}], "doc": "SeleniumLibrary can be imported with several optional arguments.\n\n\n- `timeout`: Default value for `timeouts` used with `Wait ...` keywords.\n- `implicit_wait`: Default value for `implicit wait` used when locating elements.\n- `run_on_failure`: Default action for the `run-on-failure functionality`.\n- `screenshot_root_directory`: Path to folder where possible screenshots are created or EMBED. See `Set Screenshot Directory` keyword for further details about EMBED. If not given, the directory where the log file is written is used.\n- `plugins`: Allows extending the SeleniumLibrary with external Python classes.\n- `event_firing_webdriver`: Class for wrapping Selenium with [EventFiringWebDriver](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html\\#module-selenium.webdriver.support.event_firing_webdriver)\n- `page_load_timeout`: Default value to wait for page load to complete until a timeout exception is raised.\n- `action_chain_delay`: Default value for `ActionChains` delay to wait in between actions.\n\n", "tags": [], "source": null, "shortdoc": "SeleniumLibrary can be imported with several optional arguments.", "lineno": 443}], "keywords": [{"name": "Add Cookie", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "domain", "kind": "POSITIONAL_OR_NAMED", "repr": "domain: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "secure", "kind": "POSITIONAL_OR_NAMED", "repr": "secure: bool | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "expiry", "kind": "POSITIONAL_OR_NAMED", "repr": "expiry: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Adds a cookie to your current session.\n\n\n`name` and `value` are required, `path`, `domain`, `secure` and `expiry` are optional.  Expiry supports the same formats as the [DateTime](http://robotframework.org/robotframework/latest/libraries/DateTime.html) library or an epoch timestamp.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Add Cookie` | foo | bar |  |  |\n| `Add Cookie` | foo | bar | domain=example.com |  |\n| `Add Cookie` | foo | bar | expiry=2027-09-28 16:21:35 | \\# Expiry as timestamp. |\n| `Add Cookie` | foo | bar | expiry=1822137695 | \\# Expiry as epoch seconds. |\n\n\nPrior to SeleniumLibrary 3.0 setting expiry did not work.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Adds a cookie to your current session.", "lineno": 143}, {"name": "Add Location Strategy", "args": [{"name": "strategy_name", "kind": "POSITIONAL_OR_NAMED", "repr": "strategy_name: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "strategy_keyword", "kind": "POSITIONAL_OR_NAMED", "repr": "strategy_keyword: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "persist", "kind": "POSITIONAL_OR_NAMED", "repr": "persist: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Adds a custom location strategy.\n\n\nSee `Custom locators` for information on how to create and use custom strategies. `Remove Location Strategy` can be used to remove a registered strategy.\n\n\nLocation strategies are automatically removed after leaving the current scope by default. Setting `persist` to a true value (see `Boolean arguments`) will cause the location strategy to stay registered throughout the life of the test.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Adds a custom location strategy.", "lineno": 1143}, {"name": "Alert Should Be Present", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str = ", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str = ACCEPT", "required": true, "defaultValue": "ACCEPT", "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies that an alert is present and by default, accepts it.\n\n\nFails if no alert is present. If `text` is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the `action` argument same way as with `Handle Alert`.\n\n\n`timeout` specifies how long to wait for the alert to appear. If it is not given, the global default `timeout` is used instead.\n\n\n`action` and `timeout` arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py", "shortdoc": "Verifies that an alert is present and by default, accepts it.", "lineno": 52}, {"name": "Alert Should Not Be Present", "args": [{"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str = ACCEPT", "required": true, "defaultValue": "ACCEPT", "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies that no alert is present.\n\n\nIf the alert actually exists, the `action` argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the `Handle Alert` keyword.\n\n\n`timeout` specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the `time format` section for information about the syntax.\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py", "shortdoc": "Verifies that no alert is present.", "lineno": 79}, {"name": "Assign Id To Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "id", "kind": "POSITIONAL_OR_NAMED", "repr": "id: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Assigns a temporary `id` to the element specified by `locator`.\n\n\nThis is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Assign ID to Element` | //ul[@class='example' and ./li[contains(., 'Stuff')]] | my id |\n| `Page Should Contain Element` | my id |  |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Assigns a temporary `id` to the element specified by `locator`.", "lineno": 221}, {"name": "Capture Element Screenshot", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str = selenium-element-screenshot-{index}.png", "required": true, "defaultValue": "selenium-element-screenshot-{index}.png", "types": [null], "typedocs": []}], "doc": "Captures a screenshot from the element identified by `locator` and embeds it into log file.\n\n\nSee `Capture Page Screenshot` for details about `filename` argument. See the `Locating elements` section for details about the locator syntax.\n\n\nAn absolute path to the created element screenshot is returned.\n\n\nSupport for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element.\n\n\nNew in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Capture Element Screenshot` | id:image_id |  |\n| `Capture Element Screenshot` | id:image_id | ${OUTPUTDIR}/id_image_id-1.png |\n| `Capture Element Screenshot` | id:image_id | EMBED |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py", "shortdoc": "Captures a screenshot from the element identified by `locator` and embeds it into log file.", "lineno": 129}, {"name": "Capture Page Screenshot", "args": [{"name": "filename", "kind": "POSITIONAL_OR_NAMED", "repr": "filename: str = selenium-screenshot-{index}.png", "required": true, "defaultValue": "selenium-screenshot-{index}.png", "types": [null], "typedocs": []}], "doc": "Takes a screenshot of the current page and embeds it into a log file.\n\n\n`filename` argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when `importing` the library or by using the `Set Screenshot Directory` keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written.\n\n\nIf `filename` equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem.\n\n\nStarting from SeleniumLibrary 1.8, if `filename` contains marker `{index}`, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's [format string syntax](https://docs.python.org/3/library/string.html\\#format-string-syntax).\n\n\nAn absolute path to the created screenshot file is returned or if `filename`  equals to EMBED, word `EMBED` is returned.\n\n\nSupport for EMBED is new in SeleniumLibrary 4.2\n\n\nExamples:\n\n\n|  |  |\n| :--- | :--- |\n| `Capture Page Screenshot` |  |\n| `File Should Exist` | ${OUTPUTDIR}/selenium-screenshot-1.png |\n| ${path} = | `Capture Page Screenshot` |\n| `File Should Exist` | ${OUTPUTDIR}/selenium-screenshot-2.png |\n| `File Should Exist` | ${path} |\n| `Capture Page Screenshot` | custom_name.png |\n| `File Should Exist` | ${OUTPUTDIR}/custom_name.png |\n| `Capture Page Screenshot` | custom_with_index_{index}.png |\n| `File Should Exist` | ${OUTPUTDIR}/custom_with_index_1.png |\n| `Capture Page Screenshot` | formatted_index_{index:03}.png |\n| `File Should Exist` | ${OUTPUTDIR}/formatted_index_001.png |\n| `Capture Page Screenshot` | EMBED |\n| `File Should Not Exist` | EMBED |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py", "shortdoc": "Takes a screenshot of the current page and embeds it into a log file.", "lineno": 67}, {"name": "Checkbox Should Be Selected", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Verifies checkbox `locator` is selected/checked.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies checkbox `locator` is selected/checked.", "lineno": 44}, {"name": "Checkbox Should Not Be Selected", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Verifies checkbox `locator` is not selected/checked.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies checkbox `locator` is not selected/checked.", "lineno": 58}, {"name": "Choose File", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "file_path", "kind": "POSITIONAL_OR_NAMED", "repr": "file_path: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Inputs the `file_path` into the file input field `locator`.\n\n\nThis keyword is most often used to input files into upload forms. The keyword does not check `file_path` is the file or folder available on the machine where tests are executed. If the `file_path` points at a file and when using Selenium Grid, Selenium will [magically](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload\\#selenium.webdriver.remote.command.Command.UPLOAD_FILE), transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser.\n\n\nThat `file_path` is not checked, is new in SeleniumLibrary 4.0.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Choose File` | my_upload_field | ${CURDIR}/trades.csv |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Inputs the `file_path` into the file input field `locator`.", "lineno": 216}, {"name": "Clear Element Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Clears the value of the text-input-element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Clears the value of the text-input-element identified by `locator`.", "lineno": 555}, {"name": "Click Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: bool | str = False", "required": true, "defaultValue": "False", "types": ["\n"], "typedocs": []}], "doc": "Clicks the button identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name`, and `value`.\n\n\nSee the `Click Element` keyword for details about the `modifier` argument.\n\n\nThe `modifier` argument is new in SeleniumLibrary 3.3\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Clicks the button identified by `locator`.", "lineno": 578}, {"name": "Click Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: bool | str = False", "required": true, "defaultValue": "False", "types": ["\n"], "typedocs": []}, {"name": "action_chain", "kind": "POSITIONAL_OR_NAMED", "repr": "action_chain: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Click the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `modifier` argument can be used to pass [Selenium Keys](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\\#selenium.webdriver.common.keys.Keys) when clicking the element. The `+` can be used as a separator for different Selenium Keys. The `CTRL` is internally translated to the `CONTROL` key. The `modifier` is space and case insensitive, example \"alt\" and \" aLt \" are supported formats to [ALT key](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\\#selenium.webdriver.common.keys.Keys.ALT) . If `modifier` does not match to Selenium Keys, keyword fails.\n\n\nIf `action_chain` argument is true, see `Boolean arguments` for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the \\<web_element>.click() function. If both `action_chain` and `modifier` are defined, the click will be performed using `modifier` and `action_chain` will be ignored.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Click Element | id:button |  | \\# Would click element without any modifiers. |\n| Click Element | id:button | CTRL | \\# Would click element with CTLR key pressed down. |\n| Click Element | id:button | CTRL+ALT | \\# Would click element with CTLR and ALT keys pressed down. |\n| Click Element | id:button | action_chain=True | \\# Clicks the button using an Selenium  ActionChains |\n\n\nThe `modifier` argument is new in SeleniumLibrary 3.2 The `action_chain` argument is new in SeleniumLibrary 4.1\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Click the element identified by `locator`.", "lineno": 648}, {"name": "Click Element At Coordinates", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "xoffset", "kind": "POSITIONAL_OR_NAMED", "repr": "xoffset: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "yoffset", "kind": "POSITIONAL_OR_NAMED", "repr": "yoffset: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Click the element `locator` at `xoffset/yoffset`.\n\n\nThe Cursor is moved and the center of the element and x/y coordinates are calculated from that point.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Click the element `locator` at `xoffset/yoffset`.", "lineno": 716}, {"name": "Click Image", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: bool | str = False", "required": true, "defaultValue": "False", "types": ["\n"], "typedocs": []}], "doc": "Clicks an image identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\n\nSee the `Click Element` keyword for details about the `modifier` argument.\n\n\nThe `modifier` argument is new in SeleniumLibrary 3.3\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Clicks an image identified by `locator`.", "lineno": 602}, {"name": "Click Link", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "modifier", "kind": "POSITIONAL_OR_NAMED", "repr": "modifier: bool | str = False", "required": true, "defaultValue": "False", "types": ["\n"], "typedocs": []}], "doc": "Clicks a link identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\n\nSee the `Click Element` keyword for details about the `modifier` argument.\n\n\nThe `modifier` argument is new in SeleniumLibrary 3.3\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Clicks a link identified by `locator`.", "lineno": 627}, {"name": "Close All Browsers", "args": [], "doc": "Closes all open browsers and resets the browser cache.\n\n\nAfter this keyword, new indexes returned from `Open Browser` keyword are reset to 1.\n\n\nThis keyword should be used in test or suite teardown to make sure all browsers are closed.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Closes all open browsers and resets the browser cache.", "lineno": 40}, {"name": "Close Browser", "args": [], "doc": "Closes the current browser.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Closes the current browser.", "lineno": 53}, {"name": "Close Window", "args": [], "doc": "Closes currently opened and selected browser window/tab.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Closes currently opened and selected browser window/tab.", "lineno": 125}, {"name": "Cover Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Will cover elements identified by `locator` with a blue div without breaking page layout.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nNew in SeleniumLibrary 3.3.0\n\n\nExample: |`Cover Element` | css:div\\#container |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Will cover elements identified by `locator` with a blue div without breaking page layout.", "lineno": 505}, {"name": "Create Webdriver", "args": [{"name": "driver_name", "kind": "POSITIONAL_OR_NAMED", "repr": "driver_name: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "alias", "kind": "POSITIONAL_OR_NAMED", "repr": "alias: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "kwargs", "kind": "POSITIONAL_OR_NAMED", "repr": "kwargs: dict | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "&init_kwargs", "kind": "VAR_NAMED", "repr": "**init_kwargs", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Creates an instance of Selenium WebDriver.\n\n\nLike `Open Browser`, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by `Open Browser` is not adequate.\n\n\n`driver_name` must be a WebDriver implementation name like Firefox, Chrome, Ie, Edge, Safari, or Remote.\n\n\nThe initialized WebDriver can be configured either with a Python dictionary `kwargs` or by using keyword arguments `**init_kwargs`. These arguments are passed directly to WebDriver without any processing. See [Selenium API documentation](https://seleniumhq.github.io/selenium/docs/api/py/api.html) for details about the supported arguments.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| \\# Use proxy with Firefox |  |  |  |\n| ${proxy}= | `Evaluate` | selenium.webdriver.Proxy() | modules=selenium, selenium.webdriver |\n| ${proxy.http_proxy}= | `Set Variable` | localhost:8888 |  |\n| `Create Webdriver` | Firefox | proxy=${proxy} |  |\n\n\nReturns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when `Close All Browsers` keyword is used. See `Switch Browser` for an example.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Creates an instance of Selenium WebDriver.", "lineno": 336}, {"name": "Current Frame Should Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies that the current frame contains `text`.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Current Frame Contains`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Verifies that the current frame contains `text`.", "lineno": 53}, {"name": "Current Frame Should Not Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies that the current frame does not contain `text`.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Verifies that the current frame does not contain `text`.", "lineno": 70}, {"name": "Delete All Cookies", "args": [], "doc": "Deletes all cookies.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Deletes all cookies.", "lineno": 57}, {"name": "Delete Cookie", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Deletes the cookie matching `name`.\n\n\nIf the cookie is not found, nothing happens.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Deletes the cookie matching `name`.", "lineno": 62}, {"name": "Double Click Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Double clicks the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Double clicks the element identified by `locator`.", "lineno": 738}, {"name": "Drag And Drop", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "target", "kind": "POSITIONAL_OR_NAMED", "repr": "target: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Drags the element identified by `locator` into the `target` element.\n\n\nThe `locator` argument is the locator of the dragged element and the `target` is the locator of the target. See the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Drag And Drop` | css:div\\#element | css:div.target |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Drags the element identified by `locator` into the `target` element.", "lineno": 774}, {"name": "Drag And Drop By Offset", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "xoffset", "kind": "POSITIONAL_OR_NAMED", "repr": "xoffset: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "yoffset", "kind": "POSITIONAL_OR_NAMED", "repr": "yoffset: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Drags the element identified with `locator` by `xoffset/yoffset`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe element will be moved by `xoffset` and `yoffset`, each of which is a negative or positive number specifying the offset.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Drag And Drop By Offset` | myElem | 50 | -35 | \\# Move myElem 50px right and 35px down |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Drags the element identified with `locator` by `xoffset/yoffset`.", "lineno": 792}, {"name": "Element Attribute Value Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "attribute", "kind": "POSITIONAL_OR_NAMED", "repr": "attribute: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies element identified by `locator` contains expected attribute value.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample: `Element Attribute Value Should Be` | css:img | href | value\n\n\nNew in SeleniumLibrary 3.2.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies element identified by `locator` contains expected attribute value.", "lineno": 445}, {"name": "Element Should Be Disabled", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Verifies that element identified by `locator` is disabled.\n\n\nThis keyword considers also elements that are read-only to be disabled.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element identified by `locator` is disabled.", "lineno": 240}, {"name": "Element Should Be Enabled", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Verifies that element identified by `locator` is enabled.\n\n\nThis keyword considers also elements that are read-only to be disabled.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element identified by `locator` is enabled.", "lineno": 253}, {"name": "Element Should Be Focused", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Verifies that element identified by `locator` is focused.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element identified by `locator` is focused.", "lineno": 266}, {"name": "Element Should Be Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies that the element identified by `locator` is visible.\n\n\nHerein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries `display:none` is not logically visible, so using this keyword on that element would fail.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that the element identified by `locator` is visible.", "lineno": 283}, {"name": "Element Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Verifies that element `locator` contains text `expected`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.\n\n\n`ignore_case` argument is new in SeleniumLibrary 3.1.\n\n\nUse `Element Text Should Be` if you want to match the exact text, not a substring.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` contains text `expected`.", "lineno": 54}, {"name": "Element Should Not Be Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies that the element identified by `locator` is NOT visible.\n\n\nPasses if the element does not exists. See `Element Should Be Visible` for more information about visibility and supported arguments.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that the element identified by `locator` is NOT visible.", "lineno": 306}, {"name": "Element Should Not Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Verifies that element `locator` does not contain text `expected`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n\n`ignore_case` argument new in SeleniumLibrary 3.1.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` does not contain text `expected`.", "lineno": 92}, {"name": "Element Text Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Verifies that element `locator` contains exact the text `expected`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n\n`ignore_case` argument is new in SeleniumLibrary 3.1.\n\n\nUse `Element Should Contain` if a substring match is desired.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` contains exact the text `expected`.", "lineno": 325}, {"name": "Element Text Should Not Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "not_expected", "kind": "POSITIONAL_OR_NAMED", "repr": "not_expected: None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Verifies that element `locator` does not contain exact the text `not_expected`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `ignore_case` argument can be set to True to compare case insensitive, default is False.\n\n\nNew in SeleniumLibrary 3.1.1\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` does not contain exact the text `not_expected`.", "lineno": 361}, {"name": "Execute Async Javascript", "args": [{"name": "@code: Any", "kind": "VAR_POSITIONAL", "repr": "*code: Any", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Executes asynchronous JavaScript code with possible arguments.\n\n\nSimilar to `Execute Javascript` except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.\n\n\nScripts must complete within the script timeout or this keyword will fail. See the `Timeout` section for more information.\n\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript [arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html\\#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script) as part of `code` argument. See `Execute Javascript` for more details.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Execute Async JavaScript` | var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000); |  |\n| `Execute Async JavaScript` | ${CURDIR}/async_js_to_execute.js |  |\n| ${result} = | `Execute Async JavaScript` |  |\n| ... | var callback = arguments[arguments.length - 1]; |  |\n| ... | function answer(){callback(\"text\");}; |  |\n| ... | window.setTimeout(answer, 2000); |  |\n| `Should Be Equal` | ${result} | text |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\javascript.py", "shortdoc": "Executes asynchronous JavaScript code with possible arguments.", "lineno": 76}, {"name": "Execute Javascript", "args": [{"name": "@code: Any", "kind": "VAR_POSITIONAL", "repr": "*code: Any", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Executes the given JavaScript code with possible arguments.\n\n\n`code` may be divided into multiple cells in the test data and `code` may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from `code`.\n\n\nIf `code` is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.\n\n\nThe JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use `window` to refer to the window of your application and `document` to refer to the document object of the current frame or window, e.g. `document.getElementById('example')`.\n\n\nThis keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.\n\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript [arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html\\#selenium.webdriver.remote.webdriver.WebDriver.execute_script) as part of `code` argument. The JavaScript code and arguments must be separated with `JAVASCRIPT` and `ARGUMENTS` markers and must be used exactly with this format. If the Javascript code is first, then the `JAVASCRIPT` marker is optional. The order of `JAVASCRIPT` and `ARGUMENTS` markers can be swapped, but if `ARGUMENTS` is the first marker, then `JAVASCRIPT` marker is mandatory. It is only allowed to use `JAVASCRIPT` and `ARGUMENTS` markers only one time in the `code` argument.\n\n\nExamples:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Execute JavaScript` | window.myFunc('arg1', 'arg2') |  |  |  |\n| `Execute JavaScript` | ${CURDIR}/js_to_execute.js |  |  |  |\n| `Execute JavaScript` | alert(arguments[0]); | ARGUMENTS | 123 |  |\n| `Execute JavaScript` | ARGUMENTS | 123 | JAVASCRIPT | alert(arguments[0]); |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\javascript.py", "shortdoc": "Executes the given JavaScript code with possible arguments.", "lineno": 33}, {"name": "Frame Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies that frame identified by `locator` contains `text`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Verifies that frame identified by `locator` contains `text`.", "lineno": 84}, {"name": "Get Action Chain Delay", "args": [], "doc": "Gets the currently stored value for chain_delay_value in timestr format.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the currently stored value for chain_delay_value in timestr format.", "lineno": 715}, {"name": "Get All Links", "args": [], "doc": "Returns a list containing ids of all links found in current page.\n\n\nIf a link has no id, an empty string will be in the list instead.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns a list containing ids of all links found in current page.", "lineno": 1022}, {"name": "Get Browser Aliases", "args": [], "doc": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary `${aliases.key}` or as list `@{aliases}[0]`.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Open Browser` | [https://example.com](https://example.com) | alias=BrowserA |  |\n| `Open Browser` | [https://example.com](https://example.com) | alias=BrowserB |  |\n| &{aliases} | `Get Browser Aliases` |  | \\# &{aliases} = { BrowserA=1|BrowserB=2 } |\n| `Log` | ${aliases.BrowserA} |  | \\# logs `1` |\n| FOR | ${alias} | IN | @{aliases} |\n|  | `Log` | ${alias} | \\# logs `BrowserA` and `BrowserB` |\n| END |  |  |  |\n\n\nSee `Switch Browser` for more information and examples.\n\n\nNew in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary `${aliases.key}` or as list `@{aliases}[0]`.", "lineno": 447}, {"name": "Get Browser Ids", "args": [], "doc": "Returns index of all active browser as list.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| @{browser_ids}= | Get Browser Ids |  |  |\n| FOR | ${id} | IN | @{browser_ids} |\n|  | @{window_titles}= | Get Window Titles | browser=${id} |\n|  | Log | Browser ${id} has these windows: ${window_titles} |  |\n| END |  |  |  |\n\n\nSee `Switch Browser` for more information and examples.\n\n\nNew in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns index of all active browser as list.", "lineno": 430}, {"name": "Get Cookie", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Returns information of cookie with `name` as an object.\n\n\nIf no cookie is found with `name`, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.\n\n\n| Attribute | Explanation |\n| :--- | :--- |\n| name | The name of a cookie. |\n| value | Value of the cookie. |\n| path | Indicates a URL path, for example `/`. |\n| domain | The domain, the cookie is visible to. |\n| secure | When true, the cookie is only used with HTTPS connections. |\n| httpOnly | When true, the cookie is not accessible via JavaScript. |\n| expiry | Python datetime object indicating when the cookie expires. |\n| extra | Possible attributes outside of the WebDriver specification |\n\n\nSee the [WebDriver specification](https://w3c.github.io/webdriver/\\#cookies) for details about the cookie information. Notice that `expiry` is specified as a [datetime object](https://docs.python.org/3/library/datetime.html\\#datetime.datetime), not as seconds since Unix Epoch like WebDriver natively does.\n\n\nIn some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the [WebDriver specification](https://w3c.github.io/webdriver/\\#cookies). These other attributes are available in an `extra` attribute in the cookie object and it contains a dictionary of the other attributes. The `extra` attribute is new in SeleniumLibrary 4.0.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Add Cookie` | foo | bar |\n| ${cookie} = | `Get Cookie` | foo |\n| `Should Be Equal` | ${cookie.name} | foo |\n| `Should Be Equal` | ${cookie.value} | bar |\n| `Should Be True` | ${cookie.expiry.year} > 2017 |  |\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Returns information of cookie with `name` as an object.", "lineno": 97}, {"name": "Get Cookies", "args": [{"name": "as_dict", "kind": "POSITIONAL_OR_NAMED", "repr": "as_dict: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Returns all cookies of the current page.\n\n\nIf `as_dict` argument evaluates as false, see `Boolean arguments` for more details, then cookie information is returned as a single string in format `name1=value1; name2=value2; name3=value3`. When `as_dict` argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library's Create Session keyword's optional cookies parameter.\n\n\nThe `` as_dict`` argument is new in SeleniumLibrary 3.3\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py", "shortdoc": "Returns all cookies of the current page.", "lineno": 70}, {"name": "Get Dom Attribute", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "attribute", "kind": "POSITIONAL_OR_NAMED", "repr": "attribute: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Returns the value of `attribute` from the element `locator`. `Get DOM Attribute` keyword only returns attributes declared within the element's HTML markup.  If the requested attribute is not there, the keyword returns ${None}.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${id}= | `Get DOM Attribute` | css:h1 | id |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the value of `attribute` from the element `locator`. `Get DOM Attribute` keyword only returns attributes declared within the element's HTML markup.  If the requested attribute is not there, the keyword returns ${None}.", "lineno": 413}, {"name": "Get Element Attribute", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "attribute", "kind": "POSITIONAL_OR_NAMED", "repr": "attribute: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Returns the value of `attribute` from the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${id}= | `Get Element Attribute` | css:h1 | id |\n\n\nPassing attribute name as part of the `locator` was removed in SeleniumLibrary 3.2. The explicit `attribute` argument should be used instead.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the value of `attribute` from the element `locator`.", "lineno": 395}, {"name": "Get Element Count", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns the number of elements matching `locator`.\n\n\nIf you wish to assert the number of matching elements, use `Page Should Contain Element` with `limit` argument. Keyword will always return an integer.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${count} = | `Get Element Count` | name:div_name |\n| `Should Be True` | ${count} > 2 |  |\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the number of elements matching `locator`.", "lineno": 1127}, {"name": "Get Element Size", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns width and height of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nBoth width and height are returned as integers.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${width} | ${height} = | `Get Element Size` | css:div\\#container |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns width and height of the element identified by `locator`.", "lineno": 490}, {"name": "Get Horizontal Position", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns the horizontal position of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe position is returned in pixels off the left side of the page, as an integer.\n\n\nSee also `Get Vertical Position`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the horizontal position of the element identified by `locator`.", "lineno": 476}, {"name": "Get List Items", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Returns all labels or values of selection list `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nReturns visible labels by default, but values can be returned by setting the `values` argument to a true value (see `Boolean arguments`).\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${labels} = | `Get List Items` | mylist |  |\n| ${values} = | `Get List Items` | css:\\#example select | values=True |\n\n\nSupport to return values is new in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns all labels or values of selection list `locator`.", "lineno": 27}, {"name": "Get Location", "args": [], "doc": "Returns the current browser window URL.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns the current browser window URL.", "lineno": 486}, {"name": "Get Locations", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": [null], "typedocs": []}], "doc": "Returns and logs URLs of all windows of the selected browser.\n\n\n**Browser Scope:**\n\n\nThe `browser` argument specifies the browser that shall return its windows information.\n\n\n- `browser` can be `index_or_alias` like in `Switch Browser`.\n\n\n- If `browser` is `CURRENT` (default, case-insensitive) the currently active browser is selected.\n\n\n- If `browser` is `ALL` (case-insensitive) the window information of all windows of all opened browsers are returned.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns and logs URLs of all windows of the selected browser.", "lineno": 166}, {"name": "Get Property", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "property", "kind": "POSITIONAL_OR_NAMED", "repr": "property: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Returns the value of `property` from the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${text_length}= | `Get Property` | css:h1 | text_length |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the value of `property` from the element `locator`.", "lineno": 430}, {"name": "Get Selected List Label", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns the label of selected option from selection list `locator`.\n\n\nIf there are multiple selected options, the label of the first option is returned.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns the label of selected option from selection list `locator`.", "lineno": 52}, {"name": "Get Selected List Labels", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns labels of selected options from selection list `locator`.\n\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns labels of selected options from selection list `locator`.", "lineno": 65}, {"name": "Get Selected List Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns the value of selected option from selection list `locator`.\n\n\nIf there are multiple selected options, the value of the first option is returned.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns the value of selected option from selection list `locator`.", "lineno": 78}, {"name": "Get Selected List Values", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns values of selected options from selection list `locator`.\n\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Returns values of selected options from selection list `locator`.", "lineno": 91}, {"name": "Get Selenium Implicit Wait", "args": [], "doc": "Gets the implicit wait value used by Selenium.\n\n\nThe value is returned as a human-readable string like `1 second`.\n\n\nSee the `Implicit wait` section above for more information.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the implicit wait value used by Selenium.", "lineno": 608}, {"name": "Get Selenium Page Load Timeout", "args": [], "doc": "Gets the time to wait for a page load to complete before raising a timeout exception.\n\n\nThe value is returned as a human-readable string like `1 second`.\n\n\nSee the `Page load` section above for more information.\n\n\nNew in SeleniumLibrary 6.1\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the time to wait for a page load to complete before raising a timeout exception.", "lineno": 618}, {"name": "Get Selenium Speed", "args": [], "doc": "Gets the delay that is waited after each Selenium command.\n\n\nThe value is returned as a human-readable string like `1 second`.\n\n\nSee the `Selenium Speed` section above for more information.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the delay that is waited after each Selenium command.", "lineno": 588}, {"name": "Get Selenium Timeout", "args": [], "doc": "Gets the timeout that is used by various keywords.\n\n\nThe value is returned as a human-readable string like `1 second`.\n\n\nSee the `Timeout` section above for more information.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Gets the timeout that is used by various keywords.", "lineno": 598}, {"name": "Get Session Id", "args": [], "doc": "Returns the currently active browser session id.\n\n\nNew in SeleniumLibrary 3.2\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns the currently active browser session id.", "lineno": 468}, {"name": "Get Source", "args": [], "doc": "Returns the entire HTML source of the current page or frame.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns the entire HTML source of the current page or frame.", "lineno": 476}, {"name": "Get Table Cell", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Returns contents of a table cell.\n\n\nThe table is located using the `locator` argument and its cell found using `row` and `column`. See the `Locating elements` section for details about the locator syntax.\n\n\nBoth row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.\n\n\nAll `\\<th>` and `\\<td>` elements anywhere in the table are considered to be cells.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Returns contents of a table cell.", "lineno": 26}, {"name": "Get Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns the text value of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the text value of the element identified by `locator`.", "lineno": 546}, {"name": "Get Title", "args": [], "doc": "Returns the title of the current page.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Returns the title of the current page.", "lineno": 481}, {"name": "Get Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns the value attribute of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the value attribute of the element identified by `locator`.", "lineno": 537}, {"name": "Get Vertical Position", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns the vertical position of the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe position is returned in pixels off the top of the page, as an integer.\n\n\nSee also `Get Horizontal Position`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the vertical position of the element identified by `locator`.", "lineno": 564}, {"name": "Get WebElement", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns the first WebElement matching the given `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns the first WebElement matching the given `locator`.", "lineno": 32}, {"name": "Get WebElements", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Returns a list of WebElement objects matching the `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nStarting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Returns a list of WebElement objects matching the `locator`.", "lineno": 41}, {"name": "Get Window Handles", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": [null], "typedocs": []}], "doc": "Returns all child window handles of the selected browser as a list.\n\n\nCan be used as a list of windows to exclude with `Select Window`.\n\n\nHow to select the `browser` scope of this keyword, see `Get Locations`.\n\n\nPrior to SeleniumLibrary 3.0, this keyword was named `List Windows`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns all child window handles of the selected browser as a list.", "lineno": 130}, {"name": "Get Window Identifiers", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": [null], "typedocs": []}], "doc": "Returns and logs id attributes of all windows of the selected browser.\n\n\nHow to select the `browser` scope of this keyword, see `Get Locations`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns and logs id attributes of all windows of the selected browser.", "lineno": 142}, {"name": "Get Window Names", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": [null], "typedocs": []}], "doc": "Returns and logs names of all windows of the selected browser.\n\n\nHow to select the `browser` scope of this keyword, see `Get Locations`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns and logs names of all windows of the selected browser.", "lineno": 150}, {"name": "Get Window Position", "args": [], "doc": "Returns current window position.\n\n\nThe position is relative to the top left corner of the screen. Returned values are integers. See also `Set Window Position`.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${x} | ${y}= | `Get Window Position` |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns current window position.", "lineno": 261}, {"name": "Get Window Size", "args": [{"name": "inner", "kind": "POSITIONAL_OR_NAMED", "repr": "inner: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Returns current window width and height as integers.\n\n\nSee also `Set Window Size`.\n\n\nIf `inner` parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See `Boolean arguments` for more details on how to set boolean arguments. The `inner` is new in SeleniumLibrary 4.0.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${width} | ${height}= | `Get Window Size` |  |\n| ${width} | ${height}= | `Get Window Size` | True |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns current window width and height as integers.", "lineno": 195}, {"name": "Get Window Titles", "args": [{"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": [null], "typedocs": []}], "doc": "Returns and logs titles of all windows of the selected browser.\n\n\nHow to select the `browser` scope of this keyword, see `Get Locations`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Returns and logs titles of all windows of the selected browser.", "lineno": 158}, {"name": "Go Back", "args": [], "doc": "Simulates the user clicking the back button on their browser.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Simulates the user clicking the back button on their browser.", "lineno": 572}, {"name": "Go To", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Navigates the current browser window to the provided `url`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Navigates the current browser window to the provided `url`.", "lineno": 577}, {"name": "Handle Alert", "args": [{"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str = ACCEPT", "required": true, "defaultValue": "ACCEPT", "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Handles the current alert and returns its message.\n\n\nBy default, the alert is accepted, but this can be controlled with the `action` argument that supports the following case-insensitive values:\n\n\n- `ACCEPT`: Accept the alert i.e. press `Ok`. Default.\n- `DISMISS`: Dismiss the alert i.e. press `Cancel`.\n- `LEAVE`: Leave the alert open.\n\n\nThe `timeout` argument specifies how long to wait for the alert to appear. If it is not given, the global default `timeout` is used instead.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Handle Alert |  |  | \\# Accept alert. |\n| Handle Alert | action=DISMISS |  | \\# Dismiss alert. |\n| Handle Alert | timeout=10 s |  | \\# Use custom timeout and accept alert. |\n| Handle Alert | DISMISS | 1 min | \\# Use custom timeout and dismiss alert. |\n| ${message} = | Handle Alert |  | \\# Accept alert and get its message. |\n| ${message} = | Handle Alert | LEAVE | \\# Leave alert open and get its message. |\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py", "shortdoc": "Handles the current alert and returns its message.", "lineno": 104}, {"name": "Input Password", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "password", "kind": "POSITIONAL_OR_NAMED", "repr": "password: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "clear", "kind": "POSITIONAL_OR_NAMED", "repr": "clear: bool = True", "required": true, "defaultValue": "True", "types": [null], "typedocs": []}], "doc": "Types the given password into the text field identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. See `Input Text` for `clear` argument details.\n\n\nDifference compared to `Input Text` is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Input Password | password_field | password |\n\n\nthe password is shown as a normal keyword argument. A way to avoid that is using variables like\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Input Password | password_field | ${PASSWORD} |\n\n\nPlease notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format.\n\n\nThe `clear` argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Types the given password into the text field identified by `locator`.", "lineno": 242}, {"name": "Input Text", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "clear", "kind": "POSITIONAL_OR_NAMED", "repr": "clear: bool = True", "required": true, "defaultValue": "True", "types": [null], "typedocs": []}], "doc": "Types the given `text` into the text field identified by `locator`.\n\n\nWhen `clear` is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use `Input Password` if you do not want the given `text` to be logged.\n\n\nIf [Selenium Grid](https://github.com/SeleniumHQ/selenium/wiki/Grid2) is used and the `text` argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the `text` string as is to the element. If a file should be transferred to the hub and upload should be performed, please use `Choose File` keyword.\n\n\nSee the `Locating elements` section for details about the locator syntax. See the `Boolean arguments` section how Boolean values are handled.\n\n\nDisabling the file upload the Selenium Grid node and the `clear` argument are new in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Types the given `text` into the text field identified by `locator`.", "lineno": 272}, {"name": "Input Text Into Alert", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "action", "kind": "POSITIONAL_OR_NAMED", "repr": "action: str = ACCEPT", "required": true, "defaultValue": "ACCEPT", "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Types the given `text` into an input field in an alert.\n\n\nThe alert is accepted by default, but that behavior can be controlled by using the `action` argument same way as with `Handle Alert`.\n\n\n`timeout` specifies how long to wait for the alert to appear. If it is not given, the global default `timeout` is used instead.\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py", "shortdoc": "Types the given `text` into an input field in an alert.", "lineno": 34}, {"name": "List Selection Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "@expected: str", "kind": "VAR_POSITIONAL", "repr": "*expected: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Verifies selection list `locator` has `expected` options selected.\n\n\nIt is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.\n\n\nIf no expected options are given, validates that the list has no selections. A more explicit alternative is using `List Should Have No Selections`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `List Selection Should Be` | gender | Female |  |\n| `List Selection Should Be` | interests | Test Automation | Python |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Verifies selection list `locator` has `expected` options selected.", "lineno": 104}, {"name": "List Should Have No Selections", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Verifies selection list `locator` has no options selected.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Verifies selection list `locator` has no options selected.", "lineno": 141}, {"name": "Location Should Be", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies that the current URL is exactly `url`.\n\n\nThe `url` argument contains the exact url that should exist in browser.\n\n\nThe `message` argument can be used to override the default error message.\n\n\n`message` argument is new in SeleniumLibrary 3.2.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Verifies that the current URL is exactly `url`.", "lineno": 491}, {"name": "Location Should Contain", "args": [{"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies that the current URL contains `expected`.\n\n\nThe `expected` argument contains the expected value in url.\n\n\nThe `message` argument can be used to override the default error message.\n\n\n`message` argument is new in SeleniumLibrary 3.2.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Verifies that the current URL contains `expected`.", "lineno": 509}, {"name": "Log Location", "args": [], "doc": "Logs and returns the current browser window URL.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Logs and returns the current browser window URL.", "lineno": 530}, {"name": "Log Source", "args": [{"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = INFO", "required": true, "defaultValue": "INFO", "types": [null], "typedocs": []}], "doc": "Logs and returns the HTML source of the current page or frame.\n\n\nThe `loglevel` argument defines the used log level. Valid log levels are `WARN`, `INFO` (default), `DEBUG`, `TRACE` and `NONE` (no logging).\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Logs and returns the HTML source of the current page or frame.", "lineno": 537}, {"name": "Log Title", "args": [], "doc": "Logs and returns the title of the current page.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Logs and returns the title of the current page.", "lineno": 549}, {"name": "Maximize Browser Window", "args": [], "doc": "Maximizes current browser window.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Maximizes current browser window.", "lineno": 185}, {"name": "Minimize Browser Window", "args": [], "doc": "Minimizes current browser window.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Minimizes current browser window.", "lineno": 190}, {"name": "Mouse Down", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Simulates pressing the left mouse button on the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe element is pressed without releasing the mouse button.\n\n\nSee also the more specific keywords `Mouse Down On Image` and `Mouse Down On Link`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates pressing the left mouse button on the element `locator`.", "lineno": 812}, {"name": "Mouse Down On Image", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Simulates a mouse down event on an image identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates a mouse down event on an image identified by `locator`.", "lineno": 1079}, {"name": "Mouse Down On Link", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Simulates a mouse down event on a link identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates a mouse down event on a link identified by `locator`.", "lineno": 1031}, {"name": "Mouse Out", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Simulates moving the mouse away from the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates moving the mouse away from the element `locator`.", "lineno": 829}, {"name": "Mouse Over", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Simulates hovering the mouse over the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates hovering the mouse over the element `locator`.", "lineno": 846}, {"name": "Mouse Up", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Simulates releasing the left mouse button on the element `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates releasing the left mouse button on the element `locator`.", "lineno": 858}, {"name": "Open Browser", "args": [{"name": "url", "kind": "POSITIONAL_OR_NAMED", "repr": "url: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = firefox", "required": true, "defaultValue": "firefox", "types": [null], "typedocs": []}, {"name": "alias", "kind": "POSITIONAL_OR_NAMED", "repr": "alias: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "remote_url", "kind": "POSITIONAL_OR_NAMED", "repr": "remote_url: bool | str = False", "required": true, "defaultValue": "False", "types": ["\n"], "typedocs": []}, {"name": "desired_capabilities", "kind": "POSITIONAL_OR_NAMED", "repr": "desired_capabilities: dict | None | str = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "ff_profile_dir", "kind": "POSITIONAL_OR_NAMED", "repr": "ff_profile_dir: FirefoxProfile | str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "options", "kind": "POSITIONAL_OR_NAMED", "repr": "options: Any = None", "required": true, "defaultValue": "None", "types": [null], "typedocs": []}, {"name": "service_log_path", "kind": "POSITIONAL_OR_NAMED", "repr": "service_log_path: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "executable_path", "kind": "POSITIONAL_OR_NAMED", "repr": "executable_path: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Opens a new browser instance to the optional `url`.\n\n\nThe `browser` argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.\n\n\n| Browser | Name(s) |\n| :--- | :--- |\n| Firefox | firefox, ff |\n| Google Chrome | googlechrome, chrome, gc |\n| Headless Firefox | headlessfirefox |\n| Headless Chrome | headlesschrome |\n| Internet Explorer | internetexplorer, ie |\n| Edge | edge |\n| Safari | safari |\n\n\nTo be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the [project documentation](https://github.com/robotframework/SeleniumLibrary\\#browser-drivers) for more details. Headless Firefox and Headless Chrome are new additions in SeleniumLibrary 3.1.0 and require Selenium 3.8.0 or newer.\n\n\nAfter opening the browser, it is possible to use optional `url` to navigate the browser to the desired address.\n\n\nOptional `alias` is an alias given for this browser instance and it can be used for switching between browsers. When same `alias` is given with two `Open Browser` keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The `alias` definition overrules `browser` definition. When same `alias` is used but a different `browser` is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when `Close All Browsers` is called. See `Switch Browser` for more information and examples.\n\n\nOptional `remote_url` is the URL for a [Selenium Grid](https://github.com/SeleniumHQ/selenium/wiki/Grid2).\n\n\nOptional `desired_capabilities` is deprecated and will be ignored. Capabilities of each individual browser is now done through options or services. Please refer to those arguments for configuring specific browsers.\n\n\nOptional `ff_profile_dir` is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. Notice that prior to SeleniumLibrary 3.0, the library contained its own profile that was used by default. The `ff_profile_dir` can also be an instance of the [selenium.webdriver.FirefoxProfile](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html) . As a third option, it is possible to use `FirefoxProfile` methods and attributes to define the profile using methods and attributes in the same way as with `options` argument. Example: It is possible to use FirefoxProfile `set_preference` to define different profile settings. See `options` argument documentation in below how to handle backslash escaping.\n\n\nOptional `options` argument allows defining browser specific Selenium options. Example for Chrome, the `options` argument allows defining the following [methods and attributes](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html\\#selenium.webdriver.chrome.options.Options) and for Firefox these [methods and attributes](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox\\#selenium.webdriver.firefox.options.Options) are available. Please note that not all browsers, supported by the SeleniumLibrary, have Selenium options available. Therefore please consult the Selenium documentation which browsers do support the Selenium options. Selenium options are also supported, when `remote_url` argument is used.\n\n\nThe SeleniumLibrary `options` argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.\n\n\nThe string format allows defining Selenium options methods or attributes and their arguments in Robot Framework test data. The method and attributes names are case and space sensitive and must match to the Selenium options methods and attributes names. When defining a method, it must be defined in a similar way as in python: method name, opening parenthesis, zero to many arguments and closing parenthesis. If there is a need to define multiple arguments for a single method, arguments must be separated with comma, just like in Python. Example: `add_argument(\"--headless\")` or `add_experimental_option(\"key\", \"value\")`. Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, `headless=True`. Multiple methods and attributes must be separated by a semicolon. Example: `add_argument(\"--headless\");add_argument(\"--start-maximized\")`.\n\n\nArguments allow defining Python data types and arguments are evaluated by using Python [ast.literal_eval](https://docs.python.org/3/library/ast.html\\#ast.literal_eval). Strings must be quoted with single or double quotes, example \"value\" or 'value'. It is also possible to define other Python builtin data types, example `True` or `None`, by not using quotes around the arguments.\n\n\nThe string format is space friendly. Usually, spaces do not alter the defining methods or attributes. There are two exceptions. In some Robot Framework test data formats, two or more spaces are considered as cell separator and instead of defining a single argument, two or more arguments may be defined. Spaces in string arguments are not removed and are left as is. Example `add_argument ( \"--headless\" )` is same as `add_argument(\"--headless\")`. But `add_argument(\" --headless \")` is not same same as `add_argument ( \"--headless\" )`, because spaces inside of quotes are not removed. Please note that if options string contains backslash, example a Windows OS path, the backslash needs escaping both in Robot Framework data and in Python side. This means single backslash must be writen using four backslash characters. Example, Windows path: \"C:\\path\\to\\profile\" must be written as \"C:\\\\\\\\path\\\\\\to\\\\\\\\profile\". Another way to write backslash is use Python [raw strings](https://docs.python.org/3/reference/lexical_analysis.html\\#string-and-bytes-literals) and example write: r\"C:\\\\path\\\\to\\\\profile\".\n\n\nAs last format, `options` argument also supports receiving the Selenium options as Python class instance. In this case, the instance is used as-is and the SeleniumLibrary will not convert the instance to other formats. For example, if the following code return value is saved to `${options}` variable in the Robot Framework data:\n\n\n```text\noptions = webdriver.ChromeOptions()\noptions.add_argument('--disable-dev-shm-usage')\nreturn options\n```\n\nThen the `${options}` variable can be used as an argument to `options`.\n\n\nExample the `options` argument can be used to launch Chomium-based applications which utilize the [Chromium Embedded Framework](https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver) . To lauch Chomium-based application, use `options` to define `binary_location` attribute and use `add_argument` method to define `remote-debugging-port` port for the application. Once the browser is opened, the test can interact with the embedded web-content of the system under test.\n\n\nOptional `service_log_path` argument defines the name of the file where to write the browser driver logs. If the `service_log_path`  argument contain a  marker `{index}`, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's [format string syntax](https://docs.python.org/3/library/string.html\\#format-string-syntax).\n\n\nOptional `executable_path` argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the [$PATH](https://en.wikipedia.org/wiki/PATH_(variable)).\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Open Browser` | [http://example.com](http://example.com) | Chrome |  |\n| `Open Browser` | [http://example.com](http://example.com) | Firefox | alias=Firefox |\n| `Open Browser` | [http://example.com](http://example.com) | Edge | remote_url=http://127.0.0.1:4444/wd/hub |\n| `Open Browser` | about:blank |  |  |\n| `Open Browser` | browser=Chrome |  |  |\n\n\nAlias examples:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| ${1_index} = | `Open Browser` | [http://example.com](http://example.com) | Chrome | alias=Chrome | \\# Opens new browser because alias is new. |\n| ${2_index} = | `Open Browser` | [http://example.com](http://example.com) | Firefox |  | \\# Opens new browser because alias is not defined. |\n| ${3_index} = | `Open Browser` | [http://example.com](http://example.com) | Chrome | alias=Chrome | \\# Switches to the browser with Chrome alias. |\n| ${4_index} = | `Open Browser` | [http://example.com](http://example.com) | Chrome | alias=${1_index} | \\# Switches to the browser with Chrome alias. |\n| Should Be Equal | ${1_index} | ${3_index} |  |  |  |\n| Should Be Equal | ${1_index} | ${4_index} |  |  |  |\n| Should Be Equal | ${2_index} | ${2} |  |  |  |\n\n\nExample when using [Chrome options](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html\\#selenium.webdriver.chrome.options.Options) method:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Open Browser` | [http://example.com](http://example.com) | Chrome | options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\") | \\# Sting format. |\n| ${options} = | Get Options |  |  | \\# Selenium options instance. |\n| `Open Browser` | [http://example.com](http://example.com) | Chrome | options=${options} |  |\n| `Open Browser` | None | Chrome | options=binary_location=\"/path/to/binary\";add_argument(\"remote-debugging-port=port\") | \\# Start Chomium-based application. |\n| `Open Browser` | None | Chrome | options=binary_location=r\"C:\\\\path\\\\to\\\\binary\" | \\# Windows OS path escaping. |\n\n\nExample for FirefoxProfile\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Open Browser` | [http://example.com](http://example.com) | Firefox | ff_profile_dir=/path/to/profile | \\# Using profile from disk. |\n| `Open Browser` | [http://example.com](http://example.com) | Firefox | ff_profile_dir=${FirefoxProfile_instance} | \\# Using instance of FirefoxProfile. |\n| `Open Browser` | [http://example.com](http://example.com) | Firefox | ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\") | \\# Defining profile using FirefoxProfile mehtods. |\n\n\nIf the provided configuration options are not enough, it is possible to use `Create Webdriver` to customize browser initialization even more.\n\n\nApplying `desired_capabilities` argument also for local browser is new in SeleniumLibrary 3.1.\n\n\nUsing `alias` to decide, is the new browser opened is new in SeleniumLibrary 4.0. The `options` and `service_log_path` are new in SeleniumLibrary 4.0. Support for `ff_profile_dir` accepting an instance of the `selenium.webdriver.FirefoxProfile` and support defining FirefoxProfile with methods and attributes are new in SeleniumLibrary 4.0.\n\n\nMaking `url` optional is new in SeleniumLibrary 4.1.\n\n\nThe `executable_path` argument is new in SeleniumLibrary 4.2.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Opens a new browser instance to the optional `url`.", "lineno": 60}, {"name": "Open Context Menu", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Opens the context menu on the element identified by `locator`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Opens the context menu on the element identified by `locator`.", "lineno": 869}, {"name": "Page Should Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies that current page contains `text`.\n\n\nIf this keyword fails, it automatically logs the page source using the log level specified with the optional `loglevel` argument. Valid log levels are `TRACE` (default), `DEBUG`, `INFO`, `WARN`, and `NONE`. If the log level is `NONE` or below the current active log level the source will not be logged.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that current page contains `text`.", "lineno": 127}, {"name": "Page Should Contain Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies button `locator` is found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name`, and `value`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies button `locator` is found from current page.", "lineno": 430}, {"name": "Page Should Contain Checkbox", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies checkbox `locator` is found from the current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies checkbox `locator` is found from the current page.", "lineno": 70}, {"name": "Page Should Contain Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}, {"name": "limit", "kind": "POSITIONAL_OR_NAMED", "repr": "limit: int | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies that element `locator` is found on the current page.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nThe `limit` argument can used to define how many elements the page should contain. When `limit` is `None` (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n\nExamples assumes that locator matches to two elements.\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Page Should Contain Element` | div_name | limit=1 | \\# Keyword fails. |\n| `Page Should Contain Element` | div_name | limit=2 | \\# Keyword passes. |\n| `Page Should Contain Element` | div_name | limit=none | \\# None is considered one or more. |\n| `Page Should Contain Element` | div_name |  | \\# Same as above. |\n\n\nThe `limit` argument is new in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` is found on the current page.", "lineno": 144}, {"name": "Page Should Contain Image", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies image identified by `locator` is found from current page.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies image identified by `locator` is found from current page.", "lineno": 1091}, {"name": "Page Should Contain Link", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies link identified by `locator` is found from current page.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies link identified by `locator` is found from current page.", "lineno": 1043}, {"name": "Page Should Contain List", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies selection list `locator` is found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Verifies selection list `locator` is found from current page.", "lineno": 159}, {"name": "Page Should Contain Radio Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies radio button `locator` is found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using `id`, `name` and `value`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies radio button `locator` is found from current page.", "lineno": 132}, {"name": "Page Should Contain Textfield", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies text field `locator` is found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text field `locator` is found from current page.", "lineno": 300}, {"name": "Page Should Not Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies the current page does not contain `text`.\n\n\nSee `Page Should Contain` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies the current page does not contain `text`.", "lineno": 192}, {"name": "Page Should Not Contain Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies button `locator` is not found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, buttons are searched using `id`, `name`, and `value`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies button `locator` is not found from current page.", "lineno": 451}, {"name": "Page Should Not Contain Checkbox", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies checkbox `locator` is not found from the current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies checkbox `locator` is not found from the current page.", "lineno": 87}, {"name": "Page Should Not Contain Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies that element `locator` is not found on the current page.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies that element `locator` is not found on the current page.", "lineno": 204}, {"name": "Page Should Not Contain Image", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies image identified by `locator` is not found from current page.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, images are searched using `id`, `name`, `src` and `alt`.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies image identified by `locator` is not found from current page.", "lineno": 1109}, {"name": "Page Should Not Contain Link", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies link identified by `locator` is not found from current page.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, links are searched using `id`, `name`, `href` and the link text.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Verifies link identified by `locator` is not found from current page.", "lineno": 1061}, {"name": "Page Should Not Contain List", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies selection list `locator` is not found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Verifies selection list `locator` is not found from current page.", "lineno": 176}, {"name": "Page Should Not Contain Radio Button", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies radio button `locator` is not found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using `id`, `name` and `value`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies radio button `locator` is not found from current page.", "lineno": 150}, {"name": "Page Should Not Contain Textfield", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies text field `locator` is not found from current page.\n\n\nSee `Page Should Contain Element` for an explanation about `message` and `loglevel` arguments.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text field `locator` is not found from current page.", "lineno": 317}, {"name": "Press Key", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "key", "kind": "POSITIONAL_OR_NAMED", "repr": "key: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Simulates user pressing key on element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\n`key` is either a single character, a string, or a numerical ASCII code of the key lead by '\\'.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Press Key` | text_field | q |  |\n| `Press Key` | text_field | abcde |  |\n| `Press Key` | login_button | \\13 | \\# ASCII code for enter key |\n\n\n`Press Key` and `Press Keys` differ in the methods to simulate key presses. `Press Key` uses the WebDriver `SEND_KEYS_TO_ELEMENT` command using the selenium send_keys method. Although one is not recommended over the other if `Press Key` does not work we recommend trying `Press Keys`. send_\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates user pressing key on element identified by `locator`.", "lineno": 901}, {"name": "Press Keys", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "@keys: str", "kind": "VAR_POSITIONAL", "repr": "*keys: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Simulates the user pressing key(s) to an element or on the active browser.\n\n\nIf `locator` evaluates as false, see `Boolean arguments` for more details, then the `keys` are sent to the currently active browser. Otherwise element is searched and `keys` are send to the element identified by the `locator`. In later case, keyword fails if element is not found. See the `Locating elements` section for details about the locator syntax.\n\n\n`keys` arguments can contain one or many strings, but it can not be empty. `keys` can also be a combination of [Selenium Keys](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html) and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the `+` character, like in `CONTROL+c`. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string `AALTO` and `ALT` not parsed inside of the string. But `A+ALT+O` would found Selenium ALT key from the `keys` argument. It also possible to press many Selenium Keys down at the same time, example 'ALT+ARROW_DOWN`.\n\n\nIf Selenium Keys are detected in the `keys` argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with `+` character, example `E+N+D`.\n\n\n`CTRL` is alias for [Selenium CONTROL](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\\#selenium.webdriver.common.keys.Keys.CONTROL) and ESC is alias for [Selenium ESCAPE](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\\#selenium.webdriver.common.keys.Keys.ESCAPE)\n\n\nNew in SeleniumLibrary 3.3\n\n\nExamples:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Press Keys` | text_field | AAAAA |  | \\# Sends string \"AAAAA\" to element. |\n| `Press Keys` | None | BBBBB |  | \\# Sends string \"BBBBB\" to currently active browser. |\n| `Press Keys` | text_field | E+N+D |  | \\# Sends string \"END\" to element. |\n| `Press Keys` | text_field | XXX | YY | \\# Sends strings \"XXX\" and \"YY\" to element. |\n| `Press Keys` | text_field | XXX+YY |  | \\# Same as above. |\n| `Press Keys` | text_field | ALT+ARROW_DOWN |  | \\# Pressing \"ALT\" key down, then pressing ARROW_DOWN and then releasing both keys. |\n| `Press Keys` | text_field | ALT | ARROW_DOWN | \\# Pressing \"ALT\" key and then pressing ARROW_DOWN. |\n| `Press Keys` | text_field | CTRL+c |  | \\# Pressing CTRL key down, sends string \"c\" and then releases CTRL key. |\n| `Press Keys` | button | RETURN |  | \\# Pressing \"ENTER\" key to element. |\n\n\n`Press Key` and `Press Keys` differ in the methods to simulate key presses. `Press Keys` uses the Selenium/WebDriver Actions. `Press Keys` also has a more extensive syntax for describing keys, key combinations, and key actions. Although one is not recommended over the other if `Press Keys` does not work we recommend trying `Press Key`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates the user pressing key(s) to an element or on the active browser.", "lineno": 928}, {"name": "Radio Button Should Be Set To", "args": [{"name": "group_name", "kind": "POSITIONAL_OR_NAMED", "repr": "group_name: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Verifies radio button group `group_name` is set to `value`.\n\n\n`group_name` is the `name` of the radio button group.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies radio button group `group_name` is set to `value`.", "lineno": 168}, {"name": "Radio Button Should Not Be Selected", "args": [{"name": "group_name", "kind": "POSITIONAL_OR_NAMED", "repr": "group_name: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Verifies radio button group `group_name` has no selection.\n\n\n`group_name` is the `name` of the radio button group.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies radio button group `group_name` has no selection.", "lineno": 183}, {"name": "Register Keyword To Run On Failure", "args": [{"name": "keyword", "kind": "POSITIONAL_OR_NAMED", "repr": "keyword: str | None", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Sets the keyword to execute, when a SeleniumLibrary keyword fails.\n\n\n`keyword` is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.\n\n\nThe initial keyword to use is set when `importing` the library, and the keyword that is used by default is `Capture Page Screenshot`. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.\n\n\nIt is possible to use string `NOTHING` or `NONE`, case-insensitively, as well as Python `None` to disable this feature altogether.\n\n\nThis keyword returns the name of the previously registered failure keyword or Python `None` if this functionality was previously disabled. The return value can be always used to restore the original value later.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Register Keyword To Run On Failure` | Log Source |  |\n| ${previous kw}= | `Register Keyword To Run On Failure` | NONE |\n| `Register Keyword To Run On Failure` | ${previous kw} |  |\n\n\nChanges in SeleniumLibrary 3.0:\n\n\n- Possible to use string `NONE` or Python `None` to disable the functionality.\n- Return Python `None` when the functionality was disabled earlier. In previous versions special value `No Keyword` was returned and it could not be used to restore the original state.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\runonfailure.py", "shortdoc": "Sets the keyword to execute, when a SeleniumLibrary keyword fails.", "lineno": 23}, {"name": "Reload Page", "args": [], "doc": "Simulates user reloading page.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Simulates user reloading page.", "lineno": 583}, {"name": "Remove Location Strategy", "args": [{"name": "strategy_name", "kind": "POSITIONAL_OR_NAMED", "repr": "strategy_name: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Removes a previously added custom location strategy.\n\n\nSee `Custom locators` for information on how to create and use custom strategies.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Removes a previously added custom location strategy.", "lineno": 1160}, {"name": "Scroll Element Into View", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Scrolls the element identified by `locator` into view.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nNew in SeleniumLibrary 3.2.0\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Scrolls the element identified by `locator` into view.", "lineno": 762}, {"name": "Select All From List", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Selects all options from multi-selection list `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Selects all options from multi-selection list `locator`.", "lineno": 193}, {"name": "Select Checkbox", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Selects the checkbox identified by `locator`.\n\n\nDoes nothing if checkbox is already selected.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Selects the checkbox identified by `locator`.", "lineno": 104}, {"name": "Select Frame", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Sets frame identified by `locator` as the current frame.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nWorks both with frames and iframes. Use `Unselect Frame` to cancel the frame selection and return to the main frame.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Select Frame` | top-frame | \\# Select frame with id or name 'top-frame' |\n| `Click Link` | example | \\# Click link 'example' in the selected frame |\n| `Unselect Frame` |  | \\# Back to main frame. |\n| `Select Frame` | //iframe[@name='xxx'] | \\# Select frame using xpath |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Sets frame identified by `locator` as the current frame.", "lineno": 25}, {"name": "Select From List By Index", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "@indexes: str", "kind": "VAR_POSITIONAL", "repr": "*indexes: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Selects options from selection list `locator` by `indexes`.\n\n\nIndexes of list options start from 0.\n\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Selects options from selection list `locator` by `indexes`.", "lineno": 209}, {"name": "Select From List By Label", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "@labels: str", "kind": "VAR_POSITIONAL", "repr": "*labels: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Selects options from selection list `locator` by `labels`.\n\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Selects options from selection list `locator` by `labels`.", "lineno": 256}, {"name": "Select From List By Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "@values: str", "kind": "VAR_POSITIONAL", "repr": "*values: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Selects options from selection list `locator` by `values`.\n\n\nIf more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Selects options from selection list `locator` by `values`.", "lineno": 234}, {"name": "Select Radio Button", "args": [{"name": "group_name", "kind": "POSITIONAL_OR_NAMED", "repr": "group_name: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Sets the radio button group `group_name` to `value`.\n\n\nThe radio button to be selected is located by two arguments:\n\n\n- `group_name` is the name of the radio button group.\n- `value` is the `id` or `value` attribute of the actual radio button.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Select Radio Button` | size | XL |\n| `Select Radio Button` | contact | email |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Sets the radio button group `group_name` to `value`.", "lineno": 198}, {"name": "Set Action Chain Delay", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Sets the duration of delay in ActionChains() used by SeleniumLibrary.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`.\n\n\nValue is always stored as milliseconds internally.\n\n\nThe previous value is returned and can be used to restore the original value later if needed.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the duration of delay in ActionChains() used by SeleniumLibrary.", "lineno": 699}, {"name": "Set Browser Implicit Wait", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Sets the implicit wait value used by Selenium.\n\n\nSame as `Set Selenium Implicit Wait` but only affects the current browser.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the implicit wait value used by Selenium.", "lineno": 721}, {"name": "Set Focus To Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Sets the focus to the element identified by `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Focus`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Sets the focus to the element identified by `locator`.", "lineno": 750}, {"name": "Set Screenshot Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path: None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Sets the directory for captured screenshots.\n\n\n`path` argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when `importing` the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written.\n\n\nIf `path` equals to EMBED (case insensitive) and `Capture Page Screenshot` or `capture Element Screenshot` keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html.\n\n\nThe previous value is returned and can be used to restore the original value later if needed.\n\n\nReturning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py", "shortdoc": "Sets the directory for captured screenshots.", "lineno": 32}, {"name": "Set Selenium Implicit Wait", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Sets the implicit wait value used by Selenium.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\n\nThis keyword sets the implicit wait for all opened browsers. Use `Set Browser Implicit Wait` to set it only to the current browser.\n\n\nSee the `Implicit wait` section above for more information.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${orig wait} = | `Set Selenium Implicit Wait` | 10 seconds |\n| `Perform AJAX call that is slow` |  |  |\n| `Set Selenium Implicit Wait` | ${orig wait} |  |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the implicit wait value used by Selenium.", "lineno": 673}, {"name": "Set Selenium Page Load Timeout", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Sets the page load timeout value used by Selenium.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\n\nIn contrast to `Set Selenium Timeout` and `Set Selenium Implicit Wait`, this keywords sets the time for the Webdriver to wait until the page is loaded before raising a timeout exception.\n\n\nSee the `Page load` section above for more information.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${orig page load timeout} = | `Set Selenium Page Load Timeout` | 30 seconds |\n| `Open page that loads slowly` |  |  |\n| `Set Selenium Page Load Timeout` | ${orig page load timeout} |  |\n\n\nNew in SeleniumLibrary 6.1\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the page load timeout value used by Selenium.", "lineno": 730}, {"name": "Set Selenium Speed", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Sets the delay that is waited after each Selenium command.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\n\nSee the `Selenium Speed` section above for more information.\n\n\nExample:\n\n\n|  |  |\n| :--- | :--- |\n| `Set Selenium Speed` | 0.5 seconds |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the delay that is waited after each Selenium command.", "lineno": 631}, {"name": "Set Selenium Timeout", "args": [{"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value: timedelta", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Sets the timeout that is used by various keywords.\n\n\nThe value can be given as a number that is considered to be seconds or as a human-readable string like `1 second`. The previous value is returned and can be used to restore the original value later if needed.\n\n\nSee the `Timeout` section above for more information.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${orig timeout} = | `Set Selenium Timeout` | 15 seconds |\n| `Open page that loads slowly` |  |  |\n| `Set Selenium Timeout` | ${orig timeout} |  |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Sets the timeout that is used by various keywords.", "lineno": 651}, {"name": "Set Window Position", "args": [{"name": "x", "kind": "POSITIONAL_OR_NAMED", "repr": "x: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "y", "kind": "POSITIONAL_OR_NAMED", "repr": "y: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Sets window position using `x` and `y` coordinates.\n\n\nThe position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.\n\n\nValues can be given using strings containing numbers or by using actual numbers. See also `Get Window Position`.\n\n\nExample:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Set Window Position` | 100 | 200 |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Sets window position using `x` and `y` coordinates.", "lineno": 274}, {"name": "Set Window Size", "args": [{"name": "width", "kind": "POSITIONAL_OR_NAMED", "repr": "width: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "height", "kind": "POSITIONAL_OR_NAMED", "repr": "height: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "inner", "kind": "POSITIONAL_OR_NAMED", "repr": "inner: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Sets current windows size to given `width` and `height`.\n\n\nValues can be given using strings containing numbers or by using actual numbers. See also `Get Window Size`.\n\n\nBrowsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size.\n\n\nIf `inner` parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM *window.innerWidth* and *window.innerHeight*. See `Boolean arguments` for more details on how to set boolean arguments.\n\n\nThe `inner` argument is new since SeleniumLibrary 4.0.\n\n\nThis `inner` argument does not support Frames. If a frame is selected, switch to default before running this.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Set Window Size` | 800 | 600 |  |\n| `Set Window Size` | 800 | 600 | True |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Sets current windows size to given `width` and `height`.", "lineno": 217}, {"name": "Simulate Event", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "event", "kind": "POSITIONAL_OR_NAMED", "repr": "event: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Simulates `event` on the element identified by `locator`.\n\n\nThis keyword is useful if element has `OnEvent` handler that needs to be explicitly invoked.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Simulate`.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\element.py", "shortdoc": "Simulates `event` on the element identified by `locator`.", "lineno": 876}, {"name": "Submit Form", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Submits a form identified by `locator`.\n\n\nIf `locator` is not given, first form on the page is submitted.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Submits a form identified by `locator`.", "lineno": 29}, {"name": "Switch Browser", "args": [{"name": "index_or_alias", "kind": "POSITIONAL_OR_NAMED", "repr": "index_or_alias: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}], "doc": "Switches between active browsers using `index_or_alias`.\n\n\nIndices are returned by the `Open Browser` keyword and aliases can be given to it explicitly. Indices start from 1.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Open Browser` | [http://google.com](http://google.com) | ff |  |\n| `Location Should Be` | [http://google.com](http://google.com) |  |  |\n| `Open Browser` | [http://yahoo.com](http://yahoo.com) | ie | alias=second |\n| `Location Should Be` | [http://yahoo.com](http://yahoo.com) |  |  |\n| `Switch Browser` | 1 | \\# index |  |\n| `Page Should Contain` | I'm feeling lucky |  |  |\n| `Switch Browser` | second | \\# alias |  |\n| `Page Should Contain` | More Yahoo! |  |  |\n| `Close All Browsers` |  |  |  |\n\n\nAbove example expects that there was no other open browsers when opening the first one because it used index `1` when switching to it later. If you are not sure about that, you can store the index into a variable as below.\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${index} = | `Open Browser` | [http://google.com](http://google.com) |\n| \\# Do something ... |  |  |\n| `Switch Browser` | ${index} |  |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Switches between active browsers using `index_or_alias`.", "lineno": 393}, {"name": "Switch Window", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: list | str = MAIN", "required": true, "defaultValue": "MAIN", "types": ["\n"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "browser", "kind": "POSITIONAL_OR_NAMED", "repr": "browser: str = CURRENT", "required": true, "defaultValue": "CURRENT", "types": [null], "typedocs": []}], "doc": "Switches to browser window matching `locator`.\n\n\nIf the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.\n\n\nNotice that alerts should be handled with `Handle Alert` or other alert related keywords.\n\n\nThe `locator` can be specified using different strategies somewhat similarly as when `locating elements` on pages.\n\n\n- By default, the `locator` is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.\n\n\n- The `locator` can specify an explicit strategy by using the format `strategy:value` (recommended) or `strategy=value`. Supported strategies are `name`, `title`, and `url`. These matches windows using their name, title, or URL, respectively. Additionally, `default` can be used to explicitly use the default strategy explained above.\n\n\n- If the `locator` is `NEW` (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.\n\n\n- If the `locator` is `MAIN` (default, case-insensitive), the main window is selected.\n\n\n- If the `locator` is `CURRENT` (case-insensitive), nothing is done. This effectively just returns the current window handle.\n\n\n- If the `locator` is not a string, it is expected to be a list of window handles *to exclude*. Such a list of excluded windows can be got from `Get Window Handles` before doing an action that opens a new window.\n\n\nThe `timeout` is used to specify how long keyword will poll to select the new window. The `timeout` is new in SeleniumLibrary 3.2.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Click Link` | popup1 |  | \\# Open new window |\n| `Switch Window` | example |  | \\# Select window using default strategy |\n| `Title Should Be` | Pop-up 1 |  |  |\n| `Click Button` | popup2 |  | \\# Open another window |\n| ${handle} = | `Switch Window` | NEW | \\# Select latest opened window |\n| `Title Should Be` | Pop-up 2 |  |  |\n| `Switch Window` | ${handle} |  | \\# Select window using handle |\n| `Title Should Be` | Pop-up 1 |  |  |\n| `Switch Window` | MAIN |  | \\# Select the main window |\n| `Title Should Be` | Main |  |  |\n| ${excludes} = | `Get Window Handles` |  | \\# Get list of current windows |\n| `Click Link` | popup3 |  | \\# Open one more window |\n| `Switch Window` | ${excludes} |  | \\# Select window using excludes |\n| `Title Should Be` | Pop-up 3 |  |  |\n\n\nThe `browser` argument allows with `index_or_alias` to implicitly switch to a specific browser when switching to a window. See `Switch Browser`\n\n\n- If the `browser` is `CURRENT` (case-insensitive), no other browser is selected.\n\n\n**NOTE:**\n\n\n- The `strategy:value` syntax is only supported by SeleniumLibrary 3.0 and newer.\n- Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.\n- Earlier versions supported aliases `None`, `null` and the empty string for selecting the main window, and alias `self` for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\window.py", "shortdoc": "Switches to browser window matching `locator`.", "lineno": 33}, {"name": "Table Cell Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies table cell contains text `expected`.\n\n\nSee `Get Table Cell` that this keyword uses internally for an explanation about accepted arguments.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table cell contains text `expected`.", "lineno": 90}, {"name": "Table Column Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "column", "kind": "POSITIONAL_OR_NAMED", "repr": "column: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies table column contains text `expected`.\n\n\nThe table is located using the `locator` argument and its column found using `column`. See the `Locating elements` section for details about the locator syntax.\n\n\nColumn indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.\n\n\nIf a table contains cells that span multiple columns, those merged cells count as a single column.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table column contains text `expected`.", "lineno": 113}, {"name": "Table Footer Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies table footer contains text `expected`.\n\n\nAny `\\<td>` element inside `\\<tfoot>` element is considered to be part of the footer.\n\n\nThe table is located using the `locator` argument. See the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table footer contains text `expected`.", "lineno": 144}, {"name": "Table Header Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies table header contains text `expected`.\n\n\nAny `\\<th>` element anywhere in the table is considered to be part of the header.\n\n\nThe table is located using the `locator` argument. See the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table header contains text `expected`.", "lineno": 169}, {"name": "Table Row Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "row", "kind": "POSITIONAL_OR_NAMED", "repr": "row: int", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies that table row contains text `expected`.\n\n\nThe table is located using the `locator` argument and its column found using `column`. See the `Locating elements` section for details about the locator syntax.\n\n\nRow indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.\n\n\nIf a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies that table row contains text `expected`.", "lineno": 194}, {"name": "Table Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "loglevel", "kind": "POSITIONAL_OR_NAMED", "repr": "loglevel: str = TRACE", "required": true, "defaultValue": "TRACE", "types": [null], "typedocs": []}], "doc": "Verifies table contains text `expected`.\n\n\nThe table is located using the `locator` argument. See the `Locating elements` section for details about the locator syntax.\n\n\nSee `Page Should Contain Element` for an explanation about the `loglevel` argument.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py", "shortdoc": "Verifies table contains text `expected`.", "lineno": 225}, {"name": "Textarea Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies text area `locator` contains text `expected`.\n\n\n`message` can be used to override default error message.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text area `locator` contains text `expected`.", "lineno": 382}, {"name": "Textarea Value Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies text area `locator` has exactly text `expected`.\n\n\n`message` can be used to override default error message.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text area `locator` has exactly text `expected`.", "lineno": 406}, {"name": "Textfield Should Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies text field `locator` contains text `expected`.\n\n\n`message` can be used to override the default error message.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text field `locator` contains text `expected`.", "lineno": 334}, {"name": "Textfield Value Should Be", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies text field `locator` has exactly text `expected`.\n\n\n`message` can be used to override default error message.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Verifies text field `locator` has exactly text `expected`.", "lineno": 358}, {"name": "Title Should Be", "args": [{"name": "title", "kind": "POSITIONAL_OR_NAMED", "repr": "title: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Verifies that the current page title equals `title`.\n\n\nThe `message` argument can be used to override the default error message.\n\n\n`message` argument is new in SeleniumLibrary 3.1.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py", "shortdoc": "Verifies that the current page title equals `title`.", "lineno": 556}, {"name": "Unselect All From List", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Unselects all options from multi-selection list `locator`.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n\nNew in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Unselects all options from multi-selection list `locator`.", "lineno": 278}, {"name": "Unselect Checkbox", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}], "doc": "Removes the selection of checkbox identified by `locator`.\n\n\nDoes nothing if the checkbox is not selected.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py", "shortdoc": "Removes the selection of checkbox identified by `locator`.", "lineno": 118}, {"name": "Unselect Frame", "args": [], "doc": "Sets the main frame as the current frame.\n\n\nIn practice cancels the previous `Select Frame` call.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py", "shortdoc": "Sets the main frame as the current frame.", "lineno": 45}, {"name": "Unselect From List By Index", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "@indexes: str", "kind": "VAR_POSITIONAL", "repr": "*indexes: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Unselects options from selection list `locator` by `indexes`.\n\n\nIndexes of list options start from 0. This keyword works only with multi-selection lists.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Unselects options from selection list `locator` by `indexes`.", "lineno": 295}, {"name": "Unselect From List By Label", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "@labels: str", "kind": "VAR_POSITIONAL", "repr": "*labels: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Unselects options from selection list `locator` by `labels`.\n\n\nThis keyword works only with multi-selection lists.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Unselects options from selection list `locator` by `labels`.", "lineno": 347}, {"name": "Unselect From List By Value", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "@values: str", "kind": "VAR_POSITIONAL", "repr": "*values: str", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Unselects options from selection list `locator` by `values`.\n\n\nThis keyword works only with multi-selection lists.\n\n\nSee the `Locating elements` section for details about the locator syntax.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py", "shortdoc": "Unselects options from selection list `locator` by `values`.", "lineno": 322}, {"name": "Wait For Condition", "args": [{"name": "condition", "kind": "POSITIONAL_OR_NAMED", "repr": "condition: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until `condition` is true or `timeout` expires.\n\n\nThe condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See `Execute JavaScript` for information about accessing content on pages.\n\n\nFails if the timeout expires before the condition becomes true. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\n`error` can be used to override the default error message.\n\n\nExamples:\n\n\n|  |  |\n| :--- | :--- |\n| `Wait For Condition` | return document.title == \"New Title\" |\n| `Wait For Condition` | return jQuery.active == 0 |\n| `Wait For Condition` | style = document.querySelector('h1').style; return style.background == \"red\" && style.color == \"white\" |\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until `condition` is true or `timeout` expires.", "lineno": 31}, {"name": "Wait For Expected Condition", "args": [{"name": "condition", "kind": "POSITIONAL_OR_NAMED", "repr": "condition: <module 'string' from 'C:\\\\Users\\\\EZWAY\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\string.py'>", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "@args", "kind": "VAR_POSITIONAL", "repr": "*args", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "timeout", "kind": "NAMED_ONLY", "repr": "timeout: float | None = 10", "required": true, "defaultValue": "10", "types": ["\n"], "typedocs": []}], "doc": "Waits until `condition` is true or `timeout` expires.\n\n\nThe condition must be one of selenium's expected condition which can be found within the selenium [[https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html\\#module-selenium.webdriver.support.expected_conditions](https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html\\#module-selenium.webdriver.support.expected_conditions) Python API] documentation. The expected condition can written as snake_case (ex title_is) or it can be space delimited (ex Title Is). Some conditions require additional arguments or `args` which should be passed along after the expected condition.\n\n\nFails if the timeout expires before the condition becomes true. The default value is 10 seconds.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| `Wait For Expected Condition` | alert_is_present |  |\n| `Wait For Expected Condition` | Title Is | New Title |\n\n\nIf the expected condition expects a locator then one can pass as arguments a tuple containing the selenium locator strategies and the locator.\n\n\nExample of expected condition expecting locator:\n\n\n```text\n${byElem}= |  Evaluate  (\"id\",\"added_btn\")\n`Wait For Expected Condition` | Presence Of Element Located | ${byElem}\n```\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\expectedconditions.py", "shortdoc": "Waits until `condition` is true or `timeout` expires.", "lineno": 24}, {"name": "Wait Until Element Contains", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the element `locator` contains `text`.\n\n\nFails if `timeout` expires before the text appears. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` contains `text`.", "lineno": 373}, {"name": "Wait Until Element Does Not Contain", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the element `locator` does not contain `text`.\n\n\nFails if `timeout` expires before the text disappears. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` does not contain `text`.", "lineno": 397}, {"name": "Wait Until Element Is Enabled", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the element `locator` is enabled.\n\n\nElement is considered enabled if it is not disabled nor read-only.\n\n\nFails if `timeout` expires before the element is enabled. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n\nConsidering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` is enabled.", "lineno": 345}, {"name": "Wait Until Element Is Not Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the element `locator` is not visible.\n\n\nFails if `timeout` expires before the element is not visible. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` is not visible.", "lineno": 322}, {"name": "Wait Until Element Is Visible", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the element `locator` is visible.\n\n\nFails if `timeout` expires before the element is visible. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` is visible.", "lineno": 299}, {"name": "Wait Until Location Contains", "args": [{"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the current URL contains `expected`.\n\n\nThe `expected` argument contains the expected value in url.\n\n\nFails if `timeout` expires before the location contains. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nNew in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the current URL contains `expected`.", "lineno": 123}, {"name": "Wait Until Location Does Not Contain", "args": [{"name": "location", "kind": "POSITIONAL_OR_NAMED", "repr": "location: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the current URL does not contains `location`.\n\n\nThe `location` argument contains value not expected in url.\n\n\nFails if `timeout` expires before the location not contains. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nNew in SeleniumLibrary 4.3\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the current URL does not contains `location`.", "lineno": 151}, {"name": "Wait Until Location Is", "args": [{"name": "expected", "kind": "POSITIONAL_OR_NAMED", "repr": "expected: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the current URL is `expected`.\n\n\nThe `expected` argument is the expected value in url.\n\n\nFails if `timeout` expires before the location is. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nNew in SeleniumLibrary 4.0\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the current URL is `expected`.", "lineno": 66}, {"name": "Wait Until Location Is Not", "args": [{"name": "location", "kind": "POSITIONAL_OR_NAMED", "repr": "location: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "message", "kind": "POSITIONAL_OR_NAMED", "repr": "message: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the current URL is not `location`.\n\n\nThe `location` argument is the unexpected value in url.\n\n\nFails if `timeout` expires before the location is not. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\nThe `message` argument can be used to override the default error message.\n\n\nNew in SeleniumLibrary 4.3\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the current URL is not `location`.", "lineno": 95}, {"name": "Wait Until Page Contains", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until `text` appears on the current page.\n\n\nFails if `timeout` expires before the text appears. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until `text` appears on the current page.", "lineno": 179}, {"name": "Wait Until Page Contains Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "limit", "kind": "POSITIONAL_OR_NAMED", "repr": "limit: int | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the element `locator` appears on the current page.\n\n\nFails if `timeout` expires before the element appears. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n\nThe `limit` argument can used to define how many elements the page should contain. When `limit` is `None` (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.\n\n\n`limit` is new in SeleniumLibrary 4.4\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` appears on the current page.", "lineno": 223}, {"name": "Wait Until Page Does Not Contain", "args": [{"name": "text", "kind": "POSITIONAL_OR_NAMED", "repr": "text: str", "required": true, "defaultValue": null, "types": [null], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until `text` disappears from the current page.\n\n\nFails if `timeout` expires before the text disappears. See the `Timeouts` section for more information about using timeouts and their default value.\n\n\n`error` can be used to override the default error message.\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until `text` disappears from the current page.", "lineno": 201}, {"name": "Wait Until Page Does Not Contain Element", "args": [{"name": "locator", "kind": "POSITIONAL_OR_NAMED", "repr": "locator: WebElement | None | str", "required": true, "defaultValue": null, "types": ["\n"], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout: timedelta | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "error", "kind": "POSITIONAL_OR_NAMED", "repr": "error: str | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "limit", "kind": "POSITIONAL_OR_NAMED", "repr": "limit: int | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}], "doc": "Waits until the element `locator` disappears from the current page.\n\n\nFails if `timeout` expires before the element disappears. See the `Timeouts` section for more information about using timeouts and their default value and the `Locating elements` section for details about the locator syntax.\n\n\n`error` can be used to override the default error message.\n\n\nThe `limit` argument can used to define how many elements the page should not contain. When `limit` is `None` (default) page can`t contain any elements. When limit is a number, page must not contain same number of elements.\n\n\n`limit` is new in SeleniumLibrary 4.4\n\n", "tags": [], "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py", "shortdoc": "Waits until the element `locator` disappears from the current page.", "lineno": 261}], "dataTypes": {}, "typedocs": []}