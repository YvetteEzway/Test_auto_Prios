mtime:1721728156.7387817
{"name": "Collections", "doc": "A library providing keywords for handling lists and dictionaries.\n\n\n`Collections` is Robot Framework's standard library that provides a set of keywords for handling Python lists and dictionaries. This library has keywords, for example, for modifying and getting values from lists and dictionaries (e.g. `Append To List`, `Get From Dictionary`) and for verifying their contents (e.g. `Lists Should Be Equal`, `Dictionary Should Contain Value`).\n\n\n### Table of contents\n\n- `Related keywords in BuiltIn`\n- `Using with list-like and dictionary-like objects`\n- `Ignore case`\n- `Boolean arguments`\n- `Data in examples`\n- `Keywords`\n\n\n## Related keywords in BuiltIn\n\nFollowing keywords in the BuiltIn library can also be used with lists and dictionaries:\n\n\n| Keyword Name | Applicable With |\n| :--- | :--- |\n| `Create List` | lists |\n| `Create Dictionary` | dicts |\n| `Get Length` | both |\n| `Length Should Be` | both |\n| `Should Be Empty` | both |\n| `Should Not Be Empty` | both |\n| `Should Contain` | both |\n| `Should Not Contain` | both |\n| `Should Contain X Times` | lists |\n| `Should Not Contain X Times` | lists |\n| `Get Count` | lists |\n\n\n## Using with list-like and dictionary-like objects\n\nList keywords that do not alter the given list can also be used with tuples, and to some extent also with other iterables. `Convert To List` can be used to convert tuples and other iterables to Python `list` objects.\n\n\nSimilarly, dictionary keywords can, for most parts, be used with other mappings. `Convert To Dictionary` can be used if real Python `dict` objects are needed.\n\n\n## Ignore case\n\nVarious keywords support ignoring case in comparisons by using the optional `ignore_case` argument. Case-insensitivity can be enabled by using `ignore_case=True` (see `Boolean arguments`) and it works recursively. With dictionaries, it is also possible to use special values `keys` and `values` to normalize only keys or values, respectively. These options themselves are case-insensitive and also singular forms `key` and `value` are supported.\n\n\nIf a dictionary contains keys that normalize to the same value, e.g. `{'a': 1, 'A': 2}`, normalizing keys causes an error.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Lists Should Be Equal` | ${list1} | ${list2} | ignore_case=True |\n| `Dictionaries Should Be Equal` | ${dict1} | ${dict2} | ignore_case=values |\n\n\nNotice that some keywords accept also an older `case_insensitive` argument in addition to `ignore_case`. The latter is new in Robot Framework 7.0 and should be used unless there is a need to support older versions. The old argument is considered deprecated and will eventually be removed.\n\n\n## Boolean arguments\n\nSome keywords accept arguments that are handled as Boolean values true or false. If such an argument is given as a string, it is considered false if it is an empty string or equal to `FALSE`, `NONE`, `NO`, `OFF` or `0`, case-insensitively. Keywords verifying something that allow dropping actual and expected values from the possible error message also consider string `no values` to be false. Other strings are considered true regardless their value, and other argument types are tested using the same [rules as in Python](http://docs.python.org/library/stdtypes.html\\#truth).\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| `Should Contain Match` | ${list} | ${pattern} | ignore_case=True |  |\n| `Should Contain Match` | ${list} | ${pattern} | ignore_case=False |  |\n| `Lists Should Be Equal` | ${list1} | ${list2} | Custom error | no values |\n\n\n## Data in examples\n\nList related keywords use variables in format `${Lx}` in their examples. They mean lists with as many alphabetic characters as specified by `x`. For example, `${L1}` means `['a']` and `${L3}` means `['a', 'b', 'c']`.\n\n\nDictionary keywords use similar `${Dx}` variables. For example, `${D1}` means `{'a': 1}` and `${D3}` means `{'a': 1, 'b': 2, 'c': 3}`.\n\n", "version": "7.0.1", "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\robot\\libraries\\Collections.py", "lineno": 888, "tags": [], "inits": [], "keywords": [{"name": "Append To List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@values", "kind": "VAR_POSITIONAL", "repr": "*values", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Adds `values` to the end of `list`.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| Append To List | ${L1} | xxx |  |  |\n| Append To List | ${L2} | x | y | z |\n\n\n=>\n\n\n```text\n${L1} = ['a', 'xxx']\n${L2} = ['a', 'b', 'x', 'y', 'z']\n```\n", "tags": [], "source": null, "shortdoc": "Adds `values` to the end of `list`.", "lineno": 40}, {"name": "Combine Lists", "args": [{"name": "@lists", "kind": "VAR_POSITIONAL", "repr": "*lists", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Combines the given `lists` together and returns the result.\n\n\nThe given lists are not altered by this keyword.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${x} = | Combine Lists | ${L1} | ${L2} |  |\n| ${y} = | Combine Lists | ${L1} | ${L2} | ${L1} |\n\n\n=>\n\n\n```text\n${x} = ['a', 'a', 'b']\n${y} = ['a', 'a', 'b', 'a']\n${L1} and ${L2} are not changed.\n```\n", "tags": [], "source": null, "shortdoc": "Combines the given `lists` together and returns the result.", "lineno": 78}, {"name": "Convert To Dictionary", "args": [{"name": "item", "kind": "POSITIONAL_OR_NAMED", "repr": "item", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Converts the given `item` to a Python `dict` type.\n\n\nMainly useful for converting other mappings to normal dictionaries. This includes converting Robot Framework's own `DotDict` instances that it uses if variables are created using the `&{var}` syntax.\n\n\nUse `Create Dictionary` from the BuiltIn library for constructing new dictionaries.\n\n", "tags": [], "source": null, "shortdoc": "Converts the given `item` to a Python `dict` type.", "lineno": 507}, {"name": "Convert To List", "args": [{"name": "item", "kind": "POSITIONAL_OR_NAMED", "repr": "item", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Converts the given `item` to a Python `list` type.\n\n\nMainly useful for converting tuples and other iterable to lists. Use `Create List` from the BuiltIn library for constructing new lists.\n\n", "tags": [], "source": null, "shortdoc": "Converts the given `item` to a Python `list` type.", "lineno": 32}, {"name": "Copy Dictionary", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "deepcopy", "kind": "POSITIONAL_OR_NAMED", "repr": "deepcopy=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Returns a copy of the given dictionary.\n\n\nBy default, returns a new dictionary with same items as in the original. Set the `deepcopy` argument to a true value if also items should be copied.\n\n\nThe given dictionary is never altered by this keyword.\n\n", "tags": [], "source": null, "shortdoc": "Returns a copy of the given dictionary.", "lineno": 602}, {"name": "Copy List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "deepcopy", "kind": "POSITIONAL_OR_NAMED", "repr": "deepcopy=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Returns a copy of the given list.\n\n\nBy default, returns a new list with same items as in the original. Set the `deepcopy` argument to a true value if also items should be copied.\n\n\nThe given list is never altered by this keyword.\n\n", "tags": [], "source": null, "shortdoc": "Returns a copy of the given list.", "lineno": 266}, {"name": "Count Values In List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "start", "kind": "POSITIONAL_OR_NAMED", "repr": "start=0", "required": true, "defaultValue": "0", "types": [], "typedocs": []}, {"name": "end", "kind": "POSITIONAL_OR_NAMED", "repr": "end=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Returns the number of occurrences of the given `value` in `list`.\n\n\nThe search can be narrowed to the selected sublist by the `start` and `end` indexes having the same semantics as with `Get Slice From List` keyword. The given list is never altered by this keyword.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${x} = | Count Values In List | ${L3} | b |\n\n\n=>\n\n\n```text\n${x} = 1\n${L3} is not changed\n```\n", "tags": [], "source": null, "shortdoc": "Returns the number of occurrences of the given `value` in `list`.", "lineno": 228}, {"name": "Dictionaries Should Be Equal", "args": [{"name": "dict1", "kind": "POSITIONAL_OR_NAMED", "repr": "dict1", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "dict2", "kind": "POSITIONAL_OR_NAMED", "repr": "dict2", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}, {"name": "ignore_keys", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_keys=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if the given dictionaries are not equal.\n\n\nFirst the equality of dictionaries' keys is checked and after that all the key value pairs. If there are differences between the values, those are listed in the error message. The types of the dictionaries do not need to be same.\n\n\n`ignore_keys` can be used to provide a list of keys to ignore in the comparison. It can be an actual list or a Python list literal. This option is new in Robot Framework 6.1. It works recursively with nested dictionaries starting from Robot Framework 7.0.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Dictionaries Should Be Equal | ${dict} | ${expected} |  |\n| Dictionaries Should Be Equal | ${dict} | ${expected} | ignore_keys=${ignored} |\n| Dictionaries Should Be Equal | ${dict} | ${expected} | ignore_keys=['key1', 'key2'] |\n\n\nSee `Lists Should Be Equal` for more information about configuring the error message with `msg` and `values` arguments.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the given dictionaries are not equal.", "lineno": 786}, {"name": "Dictionary Should Contain Item", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "key", "kind": "POSITIONAL_OR_NAMED", "repr": "key", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "An item of `key` / `value` must be found in a `dictionary`.\n\n\nUse the `msg` argument to override the default error message.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "An item of `key` / `value` must be found in a `dictionary`.", "lineno": 733}, {"name": "Dictionary Should Contain Key", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "key", "kind": "POSITIONAL_OR_NAMED", "repr": "key", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if `key` is not found from `dictionary`.\n\n\nUse the `msg` argument to override the default error message.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if `key` is not found from `dictionary`.", "lineno": 699}, {"name": "Dictionary Should Contain Sub Dictionary", "args": [{"name": "dict1", "kind": "POSITIONAL_OR_NAMED", "repr": "dict1", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "dict2", "kind": "POSITIONAL_OR_NAMED", "repr": "dict2", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails unless all items in `dict2` are found from `dict1`.\n\n\nSee `Lists Should Be Equal` for more information about configuring the error message with `msg` and `values` arguments.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails unless all items in `dict2` are found from `dict1`.", "lineno": 842}, {"name": "Dictionary Should Contain Value", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if `value` is not found from `dictionary`.\n\n\nUse the `msg` argument to override the default error message.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if `value` is not found from `dictionary`.", "lineno": 752}, {"name": "Dictionary Should Not Contain Key", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "key", "kind": "POSITIONAL_OR_NAMED", "repr": "key", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if `key` is found from `dictionary`.\n\n\nUse the `msg` argument to override the default error message.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if `key` is found from `dictionary`.", "lineno": 716}, {"name": "Dictionary Should Not Contain Value", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if `value` is found from `dictionary`.\n\n\nUse the `msg` argument to override the default error message.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if `value` is found from `dictionary`.", "lineno": 769}, {"name": "Get Dictionary Items", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "sort_keys", "kind": "POSITIONAL_OR_NAMED", "repr": "sort_keys=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}], "doc": "Returns items of the given `dictionary` as a list.\n\n\nUses `Get Dictionary Keys` to get keys and then returns corresponding items. By default, keys are sorted and items returned in that order, but this can be changed by giving `sort_keys` a false value.\n\n\nItems are returned as a flat list so that first item is a key, second item is a corresponding value, third item is the second key, and so on.\n\n\nThe given `dictionary` is never altered by this keyword.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${sorted} = | Get Dictionary Items | ${D3} |  |\n| ${unsorted} = | Get Dictionary Items | ${D3} | sort_keys=False |\n\n", "tags": [], "source": null, "shortdoc": "Returns items of the given `dictionary` as a list.", "lineno": 654}, {"name": "Get Dictionary Keys", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "sort_keys", "kind": "POSITIONAL_OR_NAMED", "repr": "sort_keys=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}], "doc": "Returns keys of the given `dictionary` as a list.\n\n\nBy default, keys are returned in sorted order (assuming they are sortable), but they can be returned in the original order by giving `sort_keys` a false value.\n\n\nThe given `dictionary` is never altered by this keyword.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${sorted} = | Get Dictionary Keys | ${D3} |  |\n| ${unsorted} = | Get Dictionary Keys | ${D3} | sort_keys=False |\n\n", "tags": [], "source": null, "shortdoc": "Returns keys of the given `dictionary` as a list.", "lineno": 616}, {"name": "Get Dictionary Values", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "sort_keys", "kind": "POSITIONAL_OR_NAMED", "repr": "sort_keys=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}], "doc": "Returns values of the given `dictionary` as a list.\n\n\nUses `Get Dictionary Keys` to get keys and then returns corresponding values. By default, keys are sorted and values returned in that order, but this can be changed by giving `sort_keys` a false value.\n\n\nThe given `dictionary` is never altered by this keyword.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${sorted} = | Get Dictionary Values | ${D3} |  |\n| ${unsorted} = | Get Dictionary Values | ${D3} | sort_keys=False |\n\n", "tags": [], "source": null, "shortdoc": "Returns values of the given `dictionary` as a list.", "lineno": 637}, {"name": "Get From Dictionary", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "key", "kind": "POSITIONAL_OR_NAMED", "repr": "key", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "default", "kind": "POSITIONAL_OR_NAMED", "repr": "default=", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Returns a value from the given `dictionary` based on the given `key`.\n\n\nIf the given `key` cannot be found from the `dictionary`, this keyword fails. If optional `default` value is given, it will be returned instead of failing.\n\n\nThe given dictionary is never altered by this keyword.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${value} = | Get From Dictionary | ${D3} | b |\n\n\n=>\n\n\n```text\n${value} = 2\n```\n\nSupport for `default` is new in Robot Framework 6.0.\n\n", "tags": [], "source": null, "shortdoc": "Returns a value from the given `dictionary` based on the given `key`.", "lineno": 675}, {"name": "Get From List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Returns the value specified with an `index` from `list`.\n\n\nThe given list is never altered by this keyword.\n\n\nIndex `0` means the first position, `1` the second, and so on. Similarly, `-1` is the last position, `-2` the second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.\n\n\nExamples (including Python equivalents in comments):\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${x} = | Get From List | ${L5} | 0 | \\# L5[0] |\n| ${y} = | Get From List | ${L5} | -2 | \\# L5[-2] |\n\n\n=>\n\n\n```text\n${x} = 'a'\n${y} = 'd'\n${L5} is not changed\n```\n", "tags": [], "source": null, "shortdoc": "Returns the value specified with an `index` from `list`.", "lineno": 173}, {"name": "Get Index From List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "start", "kind": "POSITIONAL_OR_NAMED", "repr": "start=0", "required": true, "defaultValue": "0", "types": [], "typedocs": []}, {"name": "end", "kind": "POSITIONAL_OR_NAMED", "repr": "end=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Returns the index of the first occurrence of the `value` on the list.\n\n\nThe search can be narrowed to the selected sublist by the `start` and `end` indexes having the same semantics as with `Get Slice From List` keyword. In case the value is not found, -1 is returned. The given list is never altered by this keyword.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${x} = | Get Index From List | ${L5} | d |\n\n\n=>\n\n\n```text\n${x} = 3\n${L5} is not changed\n```\n", "tags": [], "source": null, "shortdoc": "Returns the index of the first occurrence of the `value` on the list.", "lineno": 244}, {"name": "Get Match Count", "args": [{"name": "list", "kind": "POSITIONAL_OR_NAMED", "repr": "list", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "case_insensitive", "kind": "POSITIONAL_OR_NAMED", "repr": "case_insensitive: bool | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "whitespace_insensitive", "kind": "POSITIONAL_OR_NAMED", "repr": "whitespace_insensitive: bool | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}, {"name": "ignore_whitespace", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_whitespace: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Returns the count of matches to `pattern` in `list`.\n\n\nFor more information on `pattern`, `case_insensitive/ignore_case`, and `whitespace_insensitive/ignore_whitespace`, see `Should Contain Match`.\n\n\nExamples:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| ${count}= | Get Match Count | ${list} | a* | \\# ${count} will be the count of strings beginning with 'a' |  |\n| ${count}= | Get Match Count | ${list} | regexp=a.* | \\# ${matches} will be the count of strings beginning with 'a' (regexp version) |  |\n| ${count}= | Get Match Count | ${list} | a* | case_insensitive=${True} | \\# ${matches} will be the count of strings beginning with 'a' or 'A' |\n\n", "tags": [], "source": null, "shortdoc": "Returns the count of matches to `pattern` in `list`.", "lineno": 1071}, {"name": "Get Matches", "args": [{"name": "list", "kind": "POSITIONAL_OR_NAMED", "repr": "list", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "case_insensitive", "kind": "POSITIONAL_OR_NAMED", "repr": "case_insensitive: bool | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "whitespace_insensitive", "kind": "POSITIONAL_OR_NAMED", "repr": "whitespace_insensitive: bool | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}, {"name": "ignore_whitespace", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_whitespace: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Returns a list of matches to `pattern` in `list`.\n\n\nFor more information on `pattern`, `case_insensitive/ignore_case`, and `whitespace_insensitive/ignore_whitespace`, see `Should Contain Match`.\n\n\nExamples:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| ${matches}= | Get Matches | ${list} | a* | \\# ${matches} will contain any string beginning with 'a' |  |\n| ${matches}= | Get Matches | ${list} | regexp=a.* | \\# ${matches} will contain any string beginning with 'a' (regexp version) |  |\n| ${matches}= | Get Matches | ${list} | a* | ignore_case=True | \\# ${matches} will contain any string beginning with 'a' or 'A' |\n\n", "tags": [], "source": null, "shortdoc": "Returns a list of matches to `pattern` in `list`.", "lineno": 1051}, {"name": "Get Slice From List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "start", "kind": "POSITIONAL_OR_NAMED", "repr": "start=0", "required": true, "defaultValue": "0", "types": [], "typedocs": []}, {"name": "end", "kind": "POSITIONAL_OR_NAMED", "repr": "end=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Returns a slice of the given list between `start` and `end` indexes.\n\n\nThe given list is never altered by this keyword.\n\n\nIf both `start` and `end` are given, a sublist containing values from `start` to `end` is returned. This is the same as `list[start:end]` in Python. To get all items from the beginning, use 0 as the start value, and to get all items until and including the end, use `None` (default) as the end value.\n\n\nUsing `start` or `end` not found on the list is the same as using the largest (or smallest) available index.\n\n\nExamples (incl. Python equivalents in comments):\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| ${x} = | Get Slice From List | ${L5} | 2 | 4 | \\# L5[2:4] |\n| ${y} = | Get Slice From List | ${L5} | 1 |  | \\# L5[1:None] |\n| ${z} = | Get Slice From List | ${L5} | end=-2 |  | \\# L5[0:-2] |\n\n\n=>\n\n\n```text\n${x} = ['c', 'd']\n${y} = ['b', 'c', 'd', 'e']\n${z} = ['a', 'b', 'c']\n${L5} is not changed\n```\n", "tags": [], "source": null, "shortdoc": "Returns a slice of the given list between `start` and `end` indexes.", "lineno": 198}, {"name": "Insert Into List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Inserts `value` into `list` to the position specified with `index`.\n\n\nIndex `0` adds the value into the first position, `1` to the second, and so on. Inserting from right works with negative indices so that `-1` is the second last position, `-2` third last, and so on. Use `Append To List` to add items to the end of the list.\n\n\nIf the absolute value of the index is greater than the length of the list, the value is added at the end (positive index) or the beginning (negative index). An index can be given either as an integer or a string that can be converted to an integer.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Insert Into List | ${L1} | 0 | xxx |\n| Insert Into List | ${L2} | ${-1} | xxx |\n\n\n=>\n\n\n```text\n${L1} = ['xxx', 'a']\n${L2} = ['a', 'xxx', 'b']\n```\n", "tags": [], "source": null, "shortdoc": "Inserts `value` into `list` to the position specified with `index`.", "lineno": 54}, {"name": "Keep In Dictionary", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@keys", "kind": "VAR_POSITIONAL", "repr": "*keys", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Keeps the given `keys` in the `dictionary` and removes all other.\n\n\nIf the given `key` cannot be found from the `dictionary`, it is ignored.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| Keep In Dictionary | ${D5} | b | x | d |\n\n\n=>\n\n\n```text\n${D5} = {'b': 2, 'd': 4}\n```\n", "tags": [], "source": null, "shortdoc": "Keeps the given `keys` in the `dictionary` and removes all other.", "lineno": 587}, {"name": "List Should Contain Sub List", "args": [{"name": "list1", "kind": "POSITIONAL_OR_NAMED", "repr": "list1", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "list2", "kind": "POSITIONAL_OR_NAMED", "repr": "list2", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if not all elements in `list2` are found in `list1`.\n\n\nThe order of values and the number of values are not taken into account.\n\n\nSee `Lists Should Be Equal` for more information about configuring the error message with `msg` and `values` arguments.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if not all elements in `list2` are found in `list1`.", "lineno": 440}, {"name": "List Should Contain Value", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if the `value` is not found from `list`.\n\n\nUse the `msg` argument to override the default error message.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the `value` is not found from `list`.", "lineno": 306}, {"name": "List Should Not Contain Duplicates", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if any element in the `list` is found from it more than once.\n\n\nThe default error message lists all the elements that were found from the `list` multiple times, but it can be overridden by giving a custom `msg`. All multiple times found items and their counts are also logged.\n\n\nThis keyword works with all iterables that can be converted to a list. The original iterable is never altered.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if any element in the `list` is found from it more than once.", "lineno": 334}, {"name": "List Should Not Contain Value", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if the `value` is found from `list`.\n\n\nUse the `msg` argument to override the default error message.\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the `value` is found from `list`.", "lineno": 320}, {"name": "Lists Should Be Equal", "args": [{"name": "list1", "kind": "POSITIONAL_OR_NAMED", "repr": "list1", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "list2", "kind": "POSITIONAL_OR_NAMED", "repr": "list2", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "values", "kind": "POSITIONAL_OR_NAMED", "repr": "values=True", "required": true, "defaultValue": "True", "types": [], "typedocs": []}, {"name": "names", "kind": "POSITIONAL_OR_NAMED", "repr": "names=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "ignore_order", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_order=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Fails if given lists are unequal.\n\n\nThe keyword first verifies that the lists have equal lengths, and then it checks are all their values equal. Possible differences between the values are listed in the default error message like `Index 4: ABC != Abc`. The types of the lists do not need to be the same. For example, Python tuple and list with same content are considered equal.\n\n\nThe error message can be configured using `msg` and `values` arguments:\n\n\n- If `msg` is not given, the default error message is used.\n- If `msg` is given and `values` gets a value considered true (see `Boolean arguments`), the error message starts with the given `msg` followed by a newline and the default message.\n- If `msg` is given and `values`  is not given a true value, the error message is just the given `msg`.\n\n\nThe optional `names` argument can be used for naming the indices shown in the default error message. It can either be a list of names matching the indices in the lists or a dictionary where keys are indices that need to be named. It is not necessary to name all indices. When using a dictionary, keys can be either integers or strings that can be converted to integers.\n\n\nExamples:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${names} = | Create List | First Name | Family Name | Email |\n| Lists Should Be Equal | ${people1} | ${people2} | names=${names} |  |\n| ${names} = | Create Dictionary | 0=First Name | 2=Email |  |\n| Lists Should Be Equal | ${people1} | ${people2} | names=${names} |  |\n\n\nIf the items in index 2 would differ in the above examples, the error message would contain a row like `Index 2 (email): name@foo.com != name@bar.com`.\n\n\nThe optional `ignore_order` argument can be used to ignore the order of the elements in the lists. Using it requires items to be sortable. This option works recursively with nested lists starting from Robot Framework 7.0.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${list1} = | Create List | apple | cherry | banana |\n| ${list2} = | Create List | cherry | banana | apple |\n| Lists Should Be Equal | ${list1} | ${list2} | ignore_order=True |  |\n\n\nThe `ignore_case` argument can be used to make comparison case-insensitive. See the `Ignore case` section for more details. This option is new in Robot Framework 7.0.\n\n", "tags": [], "source": null, "shortdoc": "Fails if given lists are unequal.", "lineno": 361}, {"name": "Log Dictionary", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "level", "kind": "POSITIONAL_OR_NAMED", "repr": "level=INFO", "required": true, "defaultValue": "INFO", "types": [], "typedocs": []}], "doc": "Logs the size and contents of the `dictionary` using given `level`.\n\n\nValid levels are TRACE, DEBUG, INFO (default), and WARN.\n\n\nIf you only want to log the size, use keyword `Get Length` from the BuiltIn library.\n\n", "tags": [], "source": null, "shortdoc": "Logs the size and contents of the `dictionary` using given `level`.", "lineno": 860}, {"name": "Log List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "level", "kind": "POSITIONAL_OR_NAMED", "repr": "level=INFO", "required": true, "defaultValue": "INFO", "types": [], "typedocs": []}], "doc": "Logs the length and contents of the `list` using given `level`.\n\n\nValid levels are TRACE, DEBUG, INFO (default), and WARN.\n\n\nIf you only want to the length, use keyword `Get Length` from the BuiltIn library.\n\n", "tags": [], "source": null, "shortdoc": "Logs the length and contents of the `list` using given `level`.", "lineno": 463}, {"name": "Pop From Dictionary", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "key", "kind": "POSITIONAL_OR_NAMED", "repr": "key", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "default", "kind": "POSITIONAL_OR_NAMED", "repr": "default=", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Pops the given `key` from the `dictionary` and returns its value.\n\n\nBy default the keyword fails if the given `key` cannot be found from the `dictionary`. If optional `default` value is given, it will be returned instead of failing.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${val}= | Pop From Dictionary | ${D3} | b |\n\n\n=>\n\n\n```text\n${val} = 2\n${D3} = {'a': 1, 'c': 3}\n```\n", "tags": [], "source": null, "shortdoc": "Pops the given `key` from the `dictionary` and returns its value.", "lineno": 568}, {"name": "Remove Duplicates", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Returns a list without duplicates based on the given `list`.\n\n\nCreates and returns a new list that contains all items in the given list so that one item can appear only once. Order of the items in the new list is the same as in the original except for missing duplicates. Number of the removed duplicates is logged.\n\n", "tags": [], "source": null, "shortdoc": "Returns a list without duplicates based on the given `list`.", "lineno": 156}, {"name": "Remove From Dictionary", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@keys", "kind": "VAR_POSITIONAL", "repr": "*keys", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Removes the given `keys` from the `dictionary`.\n\n\nIf the given `key` cannot be found from the `dictionary`, it is ignored.\n\n\nExample:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| Remove From Dictionary | ${D3} | b | x | y |\n\n\n=>\n\n\n```text\n${D3} = {'a': 1, 'c': 3}\n```\n", "tags": [], "source": null, "shortdoc": "Removes the given `keys` from the `dictionary`.", "lineno": 549}, {"name": "Remove From List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Removes and returns the value specified with an `index` from `list`.\n\n\nIndex `0` means the first position, `1` the second and so on. Similarly, `-1` is the last position, `-2` the second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${x} = | Remove From List | ${L2} | 0 |\n\n\n=>\n\n\n```text\n${x} = 'a'\n${L2} = ['b']\n```\n", "tags": [], "source": null, "shortdoc": "Removes and returns the value specified with an `index` from `list`.", "lineno": 135}, {"name": "Remove Values From List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@values", "kind": "VAR_POSITIONAL", "repr": "*values", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Removes all occurrences of given `values` from `list`.\n\n\nIt is not an error if a value does not exist in the list at all.\n\n\nExample:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| Remove Values From List | ${L4} | a | c | e | f |\n\n\n=>\n\n\n```text\n${L4} = ['b', 'd']\n```\n", "tags": [], "source": null, "shortdoc": "Removes all occurrences of given `values` from `list`.", "lineno": 120}, {"name": "Reverse List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Reverses the given list in place.\n\n\nNote that the given list is changed and nothing is returned. Use `Copy List` first, if you need to keep also the original order.\n\n\n|  |  |\n| :--- | :--- |\n| Reverse List | ${L3} |\n\n\n=>\n\n\n```text\n${L3} = ['c', 'b', 'a']\n```\n", "tags": [], "source": null, "shortdoc": "Reverses the given list in place.", "lineno": 280}, {"name": "Set List Value", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "index", "kind": "POSITIONAL_OR_NAMED", "repr": "index", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Sets the value of `list` specified by `index` to the given `value`.\n\n\nIndex `0` means the first position, `1` the second and so on. Similarly, `-1` is the last position, `-2` second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Set List Value | ${L3} | 1 | xxx |\n| Set List Value | ${L3} | -1 | yyy |\n\n\n=>\n\n\n```text\n${L3} = ['a', 'xxx', 'yyy']\n```\n\nStarting from Robot Framework 6.1, it is also possible to use the native item assignment syntax. This is equivalent to the above:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${L3}[1] = | Set Variable | xxx |\n| ${L3}[-1] = | Set Variable | yyy |\n\n", "tags": [], "source": null, "shortdoc": "Sets the value of `list` specified by `index` to the given `value`.", "lineno": 94}, {"name": "Set To Dictionary", "args": [{"name": "dictionary", "kind": "POSITIONAL_OR_NAMED", "repr": "dictionary", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@key_value_pairs", "kind": "VAR_POSITIONAL", "repr": "*key_value_pairs", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "&items", "kind": "VAR_NAMED", "repr": "**items", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Adds the given `key_value_pairs` and/or `items` to the `dictionary`.\n\n\nIf given items already exist in the dictionary, their values are updated.\n\n\nIt is easiest to specify items using the `name=value` syntax:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Set To Dictionary | ${D1} | key=value | second=${2} |\n\n\n=>\n\n\n```text\n${D1} = {'a': 1, 'key': 'value', 'second': 2}\n```\n\nA limitation of the above syntax is that keys must be strings. That can be avoided by passing keys and values as separate arguments:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| Set To Dictionary | ${D1} | key | value | ${2} | value 2 |\n\n\n=>\n\n\n```text\n${D1} = {'a': 1, 'key': 'value', 2: 'value 2'}\n```\n\nStarting from Robot Framework 6.1, it is also possible to use the native item assignment syntax. This is equivalent to the above:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${D1}[key] = | Set Variable | value |\n| ${D1}[${2}] = | Set Variable | value 2 |\n\n", "tags": [], "source": null, "shortdoc": "Adds the given `key_value_pairs` and/or `items` to the `dictionary`.", "lineno": 519}, {"name": "Should Contain Match", "args": [{"name": "list", "kind": "POSITIONAL_OR_NAMED", "repr": "list", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "case_insensitive", "kind": "POSITIONAL_OR_NAMED", "repr": "case_insensitive: bool | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "whitespace_insensitive", "kind": "POSITIONAL_OR_NAMED", "repr": "whitespace_insensitive: bool | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}, {"name": "ignore_whitespace", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_whitespace: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Fails if `pattern` is not found in `list`.\n\n\nBy default, pattern matching is similar to matching files in a shell and is case-sensitive and whitespace-sensitive. In the pattern syntax, `*` matches to anything and `?` matches to any single character. You can also prepend `glob=` to your pattern to explicitly use this pattern matching behavior.\n\n\nIf you prepend `regexp=` to your pattern, your pattern will be used according to the Python [re module](http://docs.python.org/library/re.html) regular expression syntax. Notice that the backslash character often used with regular expressions is an escape character in Robot Framework data and needs to be escaped with another backslash like `regexp=\\\\d{6}`. See `BuiltIn.Should Match Regexp` for more details.\n\n\nMatching is case-sensitive by default, but that can be changed by giving the `ignore_case` argument a true value (see `Boolean arguments`). This argument is new in Robot Framework 7.0, but with earlier versions it is possible to use `case_insensitive` for the same purpose.\n\n\nIt is possible to ignore all whitespace by giving the `ignore_whitespace` argument a true value. This argument is new in Robot Framework 7.0 as well, and with earlier versions it is possible to use `whitespace_insensitive`.\n\n\nNotice that both `case_insensitive` and `whitespace_insensitive` are considered deprecated. They will eventually be removed.\n\n\nNon-string values in lists are ignored when matching patterns.\n\n\nUse the `msg` argument to override the default error message.\n\n\nExamples:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| Should Contain Match | ${list} | a* |  |  | \\# Match strings beginning with 'a'. |\n| Should Contain Match | ${list} | regexp=a.* |  |  | \\# Same as the above but with regexp. |\n| Should Contain Match | ${list} | regexp=\\\\d{6} |  |  | \\# Match strings containing six digits. |\n| Should Contain Match | ${list} | a* | ignore_case=True |  | \\# Match strings beginning with 'a' or 'A'. |\n| Should Contain Match | ${list} | ab* | ignore_whitespace=yes |  | \\# Match strings beginning with 'ab' with possible whitespace ignored. |\n| Should Contain Match | ${list} | ab* | ignore_whitespace=true | ignore_case=true | \\# Same as the above but also ignore case. |\n\n", "tags": [], "source": null, "shortdoc": "Fails if `pattern` is not found in `list`.", "lineno": 982}, {"name": "Should Not Contain Match", "args": [{"name": "list", "kind": "POSITIONAL_OR_NAMED", "repr": "list", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "case_insensitive", "kind": "POSITIONAL_OR_NAMED", "repr": "case_insensitive: bool | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "whitespace_insensitive", "kind": "POSITIONAL_OR_NAMED", "repr": "whitespace_insensitive: bool | None = None", "required": true, "defaultValue": "None", "types": ["\n"], "typedocs": []}, {"name": "ignore_case", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_case: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}, {"name": "ignore_whitespace", "kind": "POSITIONAL_OR_NAMED", "repr": "ignore_whitespace: bool = False", "required": true, "defaultValue": "False", "types": [null], "typedocs": []}], "doc": "Fails if `pattern` is found in `list`.\n\n\nExact opposite of `Should Contain Match` keyword. See that keyword for information about arguments and usage in general.\n\n", "tags": [], "source": null, "shortdoc": "Fails if `pattern` is found in `list`.", "lineno": 1034}, {"name": "Sort List", "args": [{"name": "list_", "kind": "POSITIONAL_OR_NAMED", "repr": "list_", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Sorts the given list in place.\n\n\nSorting fails if items in the list are not comparable with each others. For example, sorting a list containing strings and numbers is not possible.\n\n\nNote that the given list is changed and nothing is returned. Use `Copy List` first, if you need to preserve the list also in the original order.\n\n", "tags": [], "source": null, "shortdoc": "Sorts the given list in place.", "lineno": 293}], "dataTypes": {}, "typedocs": []}