mtime:1721728156.8947847
{"name": "OperatingSystem", "doc": "A library providing keywords for operating system related tasks.\n\n\n`OperatingSystem` is Robot Framework's standard library that enables various operating system related tasks to be performed in the system where Robot Framework is running. It can, among other things, execute commands (e.g. `Run`), create and remove files and directories (e.g. `Create File`, `Remove Directory`), check whether files or directories exists or contain something (e.g. `File Should Exist`, `Directory Should Be Empty`) and manipulate environment variables (e.g. `Set Environment Variable`).\n\n\n### Table of contents\n\n- `Path separators`\n- `Pattern matching`\n- `Tilde expansion`\n- `pathlib.Path support`\n- `Boolean arguments`\n- `Example`\n- `Keywords`\n\n\n## Path separators\n\nBecause Robot Framework uses the backslash (`\\`) as an escape character in its data, using a literal backslash requires duplicating it like in `c:\\\\path\\\\file.txt`. That can be inconvenient especially with longer Windows paths, and thus all keywords expecting paths as arguments convert forward slashes to backslashes automatically on Windows. This also means that paths like `${CURDIR}/path/file.txt` are operating system independent.\n\n\nNotice that the automatic path separator conversion does not work if the path is only a part of an argument like with the `Run` keyword. In these cases the built-in variable `${/}` that contains `\\` or `/`, depending on the operating system, can be used instead.\n\n\n## Pattern matching\n\nMany keywords accept arguments as either *glob* or *regular expression* patterns.\n\n\n### Glob patterns\n\nSome keywords, for example `List Directory`, support so called [glob patterns](http://en.wikipedia.org/wiki/Glob_(programming)) where:\n\n\n|  |  |\n| :--- | :--- |\n| `*` | matches any string, even an empty string |\n| `?` | matches any single character |\n| `[chars]` | matches one character in the bracket |\n| `[!chars]` | matches one character not in the bracket |\n| `[a-z]` | matches one character from the range in the bracket |\n| `[!a-z]` | matches one character not from the range in the bracket |\n\n\nUnless otherwise noted, matching is case-insensitive on case-insensitive operating systems such as Windows.\n\n\n### Regular expressions\n\nSome keywords, for example `Grep File`, support [regular expressions](http://en.wikipedia.org/wiki/Regular_expression) that are more powerful but also more complicated that glob patterns. The regular expression support is implemented using Python's [re module](http://docs.python.org/library/re.html) and its documentation should be consulted for more information about the syntax.\n\n\nBecause the backslash character (`\\`) is an escape character in Robot Framework data, possible backslash characters in regular expressions need to be escaped with another backslash like `\\\\d\\\\w+`. Strings that may contain special characters but should be handled as literal strings, can be escaped with the `Regexp Escape` keyword from the BuiltIn library.\n\n\n## Tilde expansion\n\nPaths beginning with `~` or `~username` are expanded to the current or specified user's home directory, respectively. The resulting path is operating system dependent, but typically e.g. `~/robot` is expanded to `C:\\Users\\\\<user>\\robot` on Windows and `/home/\\<user>/robot` on Unixes.\n\n\n## pathlib.Path support\n\nStarting from Robot Framework 6.0, arguments representing paths can be given as [pathlib.Path](https://docs.python.org/3/library/pathlib.html) instances in addition to strings.\n\n\nAll keywords returning paths return them as strings. This may change in the future so that the return value type matches the argument type.\n\n\n## Boolean arguments\n\nSome keywords accept arguments that are handled as Boolean values true or false. If such an argument is given as a string, it is considered false if it is an empty string or equal to `FALSE`, `NONE`, `NO`, `OFF` or `0`, case-insensitively. Other strings are considered true regardless their value, and other argument types are tested using the same [rules as in Python](http://docs.python.org/library/stdtypes.html\\#truth).\n\n\nTrue examples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Remove Directory` | ${path} | recursive=True | \\# Strings are generally true. |\n| `Remove Directory` | ${path} | recursive=yes | \\# Same as the above. |\n| `Remove Directory` | ${path} | recursive=${TRUE} | \\# Python `True` is true. |\n| `Remove Directory` | ${path} | recursive=${42} | \\# Numbers other than 0 are true. |\n\n\nFalse examples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| `Remove Directory` | ${path} | recursive=False | \\# String `false` is false. |\n| `Remove Directory` | ${path} | recursive=no | \\# Also string `no` is false. |\n| `Remove Directory` | ${path} | recursive=${EMPTY} | \\# Empty string is false. |\n| `Remove Directory` | ${path} | recursive=${FALSE} | \\# Python `False` is false. |\n\n\n## Example\n\n```text\n***** Settings *****\nLibrary         OperatingSystem\n\n***** Variables *****\n${PATH}         ${CURDIR}/example.txt\n\n***** Test Cases *****\nExample\n    `Create File`          ${PATH}    Some text\n    `File Should Exist`    ${PATH}\n    `Copy File`            ${PATH}    ~/file.txt\n```\n", "version": "7.0.1", "specversion": "6", "type": "LIBRARY", "scope": "GLOBAL", "docFormat": "markdown", "source": "C:\\Users\\EZWAY\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\robot\\libraries\\OperatingSystem.py", "lineno": 39, "tags": [], "inits": [], "keywords": [{"name": "Append To Environment Variable", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@values", "kind": "VAR_POSITIONAL", "repr": "*values", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "&config", "kind": "VAR_NAMED", "repr": "**config", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Appends given `values` to environment variable `name`.\n\n\nIf the environment variable already exists, values are added after it, and otherwise a new environment variable is created.\n\n\nValues are, by default, joined together using the operating system path separator (`;` on Windows, `:` elsewhere). This can be changed by giving a separator after the values like `separator=value`. No other configuration parameters are accepted.\n\n\nExamples (assuming `NAME` and `NAME2` do not exist initially):\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Append To Environment Variable | NAME | first |  |\n| Should Be Equal | %{NAME} | first |  |\n| Append To Environment Variable | NAME | second | third |\n| Should Be Equal | %{NAME} | first${:}second${:}third |  |\n| Append To Environment Variable | NAME2 | first | separator=- |\n| Should Be Equal | %{NAME2} | first |  |\n| Append To Environment Variable | NAME2 | second | separator=- |\n| Should Be Equal | %{NAME2} | first-second |  |\n\n", "tags": [], "source": null, "shortdoc": "Appends given `values` to environment variable `name`.", "lineno": 983}, {"name": "Append To File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding=UTF-8", "required": true, "defaultValue": "UTF-8", "types": [], "typedocs": []}], "doc": "Appends the given content to the specified file.\n\n\nIf the file exists, the given text is written to its end. If the file does not exist, it is created.\n\n\nOther than not overwriting possible existing files, this keyword works exactly like `Create File`. See its documentation for more details about the usage.\n\n", "tags": [], "source": null, "shortdoc": "Appends the given content to the specified file.", "lineno": 640}, {"name": "Copy Directory", "args": [{"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Copies the source directory into the destination.\n\n\nIf the destination exists, the source is copied under it. Otherwise the destination directory and the possible missing intermediate directories are created.\n\n", "tags": [], "source": null, "shortdoc": "Copies the source directory into the destination.", "lineno": 912}, {"name": "Copy File", "args": [{"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Copies the source file into the destination.\n\n\nSource must be a path to an existing file or a glob pattern (see `Glob patterns`) that matches exactly one file. How the destination is interpreted is explained below.\n\n\n1) If the destination is an existing file, the source file is copied over it.\n\n\n2) If the destination is an existing directory, the source file is copied into it. A possible file with the same name as the source is overwritten.\n\n\n3) If the destination does not exist and it ends with a path separator (`/` or `\\`), it is considered a directory. That directory is created and a source file copied into it. Possible missing intermediate directories are also created.\n\n\n4) If the destination does not exist and it does not end with a path separator, it is considered a file. If the path to the file does not exist, it is created.\n\n\nThe resulting destination path is returned.\n\n\nSee also `Copy Files`, `Move File`, and `Move Files`.\n\n", "tags": [], "source": null, "shortdoc": "Copies the source file into the destination.", "lineno": 739}, {"name": "Copy Files", "args": [{"name": "@sources_and_destination", "kind": "VAR_POSITIONAL", "repr": "*sources_and_destination", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Copies specified files to the target directory.\n\n\nSource files can be given as exact paths and as glob patterns (see `Glob patterns`). At least one source must be given, but it is not an error if it is a pattern that does not match anything.\n\n\nLast argument must be the destination directory. If the destination does not exist, it will be created.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Copy Files | ${dir}/file1.txt | ${dir}/file2.txt | ${dir2} |\n| Copy Files | ${dir}/file-*.txt | ${dir2} |  |\n\n\nSee also `Copy File`, `Move File`, and `Move Files`.\n\n", "tags": [], "source": null, "shortdoc": "Copies specified files to the target directory.", "lineno": 865}, {"name": "Count Directories In Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Wrapper for `Count Items In Directory` returning only directory count.\n\n", "tags": [], "source": null, "shortdoc": "Wrapper for `Count Items In Directory` returning only directory count.", "lineno": 1375}, {"name": "Count Files In Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Wrapper for `Count Items In Directory` returning only file count.\n\n", "tags": [], "source": null, "shortdoc": "Wrapper for `Count Items In Directory` returning only file count.", "lineno": 1369}, {"name": "Count Items In Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Returns and logs the number of all items in the given directory.\n\n\nThe argument `pattern` has the same semantics as with `List Directory` keyword. The count is returned as an integer, so it must be checked e.g. with the built-in keyword `Should Be Equal As Integers`.\n\n", "tags": [], "source": null, "shortdoc": "Returns and logs the number of all items in the given directory.", "lineno": 1358}, {"name": "Create Binary File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Creates a binary file with the given content.\n\n\nIf content is given as a Unicode string, it is first converted to bytes character by character. All characters with ordinal below 256 can be used and are converted to bytes with same values. Using characters with higher ordinal is an error.\n\n\nByte strings, and possible other types, are written to the file as is.\n\n\nIf the directory for the file does not exist, it is created, along with missing intermediate directories.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| Create Binary File | ${dir}/example.png | ${image content} |\n| Create Binary File | ${path} | \\x01\\x00\\xe4\\x00 |\n\n\nUse `Create File` if you want to create a text file using a certain encoding. `File Should Not Exist` can be used to avoid overwriting existing files.\n\n", "tags": [], "source": null, "shortdoc": "Creates a binary file with the given content.", "lineno": 614}, {"name": "Create Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Creates the specified directory.\n\n\nAlso possible intermediate directories are created. Passes if the directory already exists, but fails if the path exists and is not a directory.\n\n", "tags": [], "source": null, "shortdoc": "Creates the specified directory.", "lineno": 697}, {"name": "Create File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "content", "kind": "POSITIONAL_OR_NAMED", "repr": "content=", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding=UTF-8", "required": true, "defaultValue": "UTF-8", "types": [], "typedocs": []}], "doc": "Creates a file with the given content and encoding.\n\n\nIf the directory where the file is created does not exist, it is automatically created along with possible missing intermediate directories. Possible existing file is overwritten.\n\n\nOn Windows newline characters (`\\n`) in content are automatically converted to Windows native newline sequence (`\\r\\n`).\n\n\nSee `Get File` for more information about possible `encoding` values, including special values `SYSTEM` and `CONSOLE`.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Create File | ${dir}/example.txt | Hello, world! |  |\n| Create File | ${path} | Hyv\\xe4 esimerkki | Latin-1 |\n| Create File | /tmp/foo.txt | 3\\nlines\\nhere\\n | SYSTEM |\n\n\nUse `Append To File` if you want to append to an existing file and `Create Binary File` if you need to write bytes without encoding. `File Should Not Exist` can be used to avoid overwriting existing files.\n\n", "tags": [], "source": null, "shortdoc": "Creates a file with the given content and encoding.", "lineno": 577}, {"name": "Directory Should Be Empty", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails unless the specified directory is empty.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails unless the specified directory is empty.", "lineno": 524}, {"name": "Directory Should Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails unless the given path points to an existing directory.\n\n\nThe path can be given as an exact path or as a glob pattern. See the `Glob patterns` section for details about the supported syntax.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails unless the given path points to an existing directory.", "lineno": 440}, {"name": "Directory Should Not Be Empty", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails if the specified directory is empty.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the specified directory is empty.", "lineno": 536}, {"name": "Directory Should Not Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails if the given path points to an existing file.\n\n\nThe path can be given as an exact path or as a glob pattern. See the `Glob patterns` section for details about the supported syntax.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the given path points to an existing file.", "lineno": 454}, {"name": "Empty Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Deletes all the content from the given directory.\n\n\nDeletes both files and sub-directories, but the specified directory itself if not removed. Use `Remove Directory` if you want to remove the whole directory.\n\n", "tags": [], "source": null, "shortdoc": "Deletes all the content from the given directory.", "lineno": 682}, {"name": "Environment Variable Should Be Set", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails if the specified environment variable is not set.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the specified environment variable is not set.", "lineno": 1030}, {"name": "Environment Variable Should Not Be Set", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails if the specified environment variable is set.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the specified environment variable is set.", "lineno": 1040}, {"name": "File Should Be Empty", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails unless the specified file is empty.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails unless the specified file is empty.", "lineno": 548}, {"name": "File Should Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails unless the given `path` points to an existing file.\n\n\nThe path can be given as an exact path or as a glob pattern. See the `Glob patterns` section for details about the supported syntax.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails unless the given `path` points to an existing file.", "lineno": 412}, {"name": "File Should Not Be Empty", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails if the specified file is empty.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the specified file is empty.", "lineno": 562}, {"name": "File Should Not Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails if the given path points to an existing file.\n\n\nThe path can be given as an exact path or as a glob pattern. See the `Glob patterns` section for details about the supported syntax.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the given path points to an existing file.", "lineno": 426}, {"name": "Get Binary File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Returns the contents of a specified file.\n\n\nThis keyword reads the specified file and returns the contents as is. See also `Get File`.\n\n", "tags": [], "source": null, "shortdoc": "Returns the contents of a specified file.", "lineno": 294}, {"name": "Get Environment Variable", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "default", "kind": "POSITIONAL_OR_NAMED", "repr": "default=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Returns the value of an environment variable with the given name.\n\n\nIf no environment variable is found, returns possible default value. If no default value is given, the keyword fails.\n\n\nReturned variables are automatically decoded to Unicode using the system encoding.\n\n\nNote that you can also access environment variables directly using the variable syntax `%{ENV_VAR_NAME}`.\n\n", "tags": [], "source": null, "shortdoc": "Returns the value of an environment variable with the given name.", "lineno": 956}, {"name": "Get Environment Variables", "args": [], "doc": "Returns currently available environment variables as a dictionary.\n\n\nBoth keys and values are decoded to Unicode using the system encoding. Altering the returned dictionary has no effect on the actual environment variables.\n\n", "tags": [], "source": null, "shortdoc": "Returns currently available environment variables as a dictionary.", "lineno": 1051}, {"name": "Get File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding=UTF-8", "required": true, "defaultValue": "UTF-8", "types": [], "typedocs": []}, {"name": "encoding_errors", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding_errors=strict", "required": true, "defaultValue": "strict", "types": [], "typedocs": []}], "doc": "Returns the contents of a specified file.\n\n\nThis keyword reads the specified file and returns the contents. Line breaks in content are converted to platform independent form. See also `Get Binary File`.\n\n\n`encoding` defines the encoding of the file. The default value is `UTF-8`, which means that UTF-8 and ASCII encoded files are read correctly. In addition to the encodings supported by the underlying Python implementation, the following special encoding values can be used:\n\n\n- `SYSTEM`: Use the default system encoding.\n- `CONSOLE`: Use the console encoding. Outside Windows this is same as the system encoding.\n\n\n`encoding_errors` argument controls what to do if decoding some bytes fails. All values accepted by `decode` method in Python are valid, but in practice the following values are most useful:\n\n\n- `strict`: Fail if characters cannot be decoded (default).\n- `ignore`: Ignore characters that cannot be decoded.\n- `replace`: Replace characters that cannot be decoded with a replacement character.\n\n", "tags": [], "source": null, "shortdoc": "Returns the contents of a specified file.", "lineno": 253}, {"name": "Get File Size", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Returns and logs file size as an integer in bytes.\n\n", "tags": [], "source": null, "shortdoc": "Returns and logs file size as an integer in bytes.", "lineno": 1305}, {"name": "Get Modified Time", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "format", "kind": "POSITIONAL_OR_NAMED", "repr": "format=timestamp", "required": true, "defaultValue": "timestamp", "types": [], "typedocs": []}], "doc": "Returns the last modification time of a file or directory.\n\n\nHow time is returned is determined based on the given `format` string as follows. Note that all checks are case-insensitive. Returned time is also automatically logged.\n\n\n1) If `format` contains the word `epoch`, the time is returned in seconds after the UNIX epoch. The return value is always an integer.\n\n\n2) If `format` contains any of the words `year`, `month`, `day`, `hour`, `min` or `sec`, only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of the words in `format` is not significant. The parts are returned as zero-padded strings (e.g. May -> `05`).\n\n\n3) Otherwise, and by default, the time is returned as a timestamp string in the format `2006-02-24 15:08:31`.\n\n\nExamples (when the modified time of `${CURDIR}` is 2006-03-29 15:06:21):\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${time} = | Get Modified Time | ${CURDIR} |  |  |\n| ${secs} = | Get Modified Time | ${CURDIR} | epoch |  |\n| ${year} = | Get Modified Time | ${CURDIR} | return year |  |\n| ${y} | ${d} = | Get Modified Time | ${CURDIR} | year,day |\n| @{time} = | Get Modified Time | ${CURDIR} | year,month,day,hour,min,sec |  |\n\n\n=>\n\n\n- ${time} = '2006-03-29 15:06:21'\n- ${secs} = 1143637581\n- ${year} = '2006'\n- ${y} = '2006' & ${d} = '29'\n- @{time} = ['2006', '03', '29', '15', '06', '21']\n\n", "tags": [], "source": null, "shortdoc": "Returns the last modification time of a file or directory.", "lineno": 1216}, {"name": "Grep File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding=UTF-8", "required": true, "defaultValue": "UTF-8", "types": [], "typedocs": []}, {"name": "encoding_errors", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding_errors=strict", "required": true, "defaultValue": "strict", "types": [], "typedocs": []}, {"name": "regexp", "kind": "POSITIONAL_OR_NAMED", "repr": "regexp=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Returns the lines of the specified file that match the `pattern`.\n\n\nThis keyword reads a file from the file system using the defined `path`, `encoding` and `encoding_errors` similarly as `Get File`. A difference is that only the lines that match the given `pattern` are returned. Lines are returned as a single string concatenated back together with newlines and the number of matched lines is automatically logged. Possible trailing newline is never returned.\n\n\nA line matches if it contains the `pattern` anywhere in it i.e. it does not need to match the pattern fully. There are two supported pattern types:\n\n\n- By default the pattern is considered a *glob* pattern where, for example, `*` and `?` can be used as wildcards.\n- If the `regexp` argument is given a true value, the pattern is considered to be a *regular expression*. These patterns are more powerful but also more complicated than glob patterns. They often use the backslash character and it needs to be escaped in Robot Framework date like `\\\\`.\n\n\nFor more information about glob and regular expression syntax, see the `Pattern matching` section. With this keyword matching is always case-sensitive.\n\n\nExamples:\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| ${errors} = | Grep File | /var/log/myapp.log | ERROR |  |\n| ${ret} = | Grep File | ${CURDIR}/file.txt | [Ww]ildc??d ex*ple |  |\n| ${ret} = | Grep File | ${CURDIR}/file.txt | [Ww]ildc\\\\w+d ex.*ple | regexp=True |\n\n\nSpecial encoding values `SYSTEM` and `CONSOLE` that `Get File` supports are supported by this keyword only with Robot Framework 4.0 and newer.\n\n\nSupport for regular expressions is new in Robot Framework 5.0.\n\n", "tags": [], "source": null, "shortdoc": "Returns the lines of the specified file that match the `pattern`.", "lineno": 305}, {"name": "Join Path", "args": [{"name": "base", "kind": "POSITIONAL_OR_NAMED", "repr": "base", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@parts", "kind": "VAR_POSITIONAL", "repr": "*parts", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Joins the given path part(s) to the given base path.\n\n\nThe path separator (`/` or `\\`) is inserted when needed and the possible absolute paths handled as expected. The resulted path is also normalized.\n\n\nExamples:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| ${path} = | Join Path | my | path |  |  |\n| ${p2} = | Join Path | my/ | path/ |  |  |\n| ${p3} = | Join Path | my | path | my | file.txt |\n| ${p4} = | Join Path | my | /path |  |  |\n| ${p5} = | Join Path | /my/path/ | .. | path2 |  |\n\n\n=>\n\n\n- ${path} = 'my/path'\n- ${p2} = 'my/path'\n- ${p3} = 'my/path/my/file.txt'\n- ${p4} = '/path'\n- ${p5} = '/my/path2'\n\n", "tags": [], "source": null, "shortdoc": "Joins the given path part(s) to the given base path.", "lineno": 1073}, {"name": "Join Paths", "args": [{"name": "base", "kind": "POSITIONAL_OR_NAMED", "repr": "base", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "@paths", "kind": "VAR_POSITIONAL", "repr": "*paths", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Joins given paths with base and returns resulted paths.\n\n\nSee `Join Path` for more information.\n\n\nExamples:\n\n\n|  |  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| @{p1} = | Join Paths | base | example | other |  |\n| @{p2} = | Join Paths | /my/base | /example | other |  |\n| @{p3} = | Join Paths | my/base | example/path/ | other | one/more |\n\n\n=>\n\n\n- @{p1} = ['base/example', 'base/other']\n- @{p2} = ['/example', '/my/base/other']\n- @{p3} = ['my/base/example/path', 'my/base/other', 'my/base/one/more']\n\n", "tags": [], "source": null, "shortdoc": "Joins given paths with base and returns resulted paths.", "lineno": 1097}, {"name": "List Directories In Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "absolute", "kind": "POSITIONAL_OR_NAMED", "repr": "absolute=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Wrapper for `List Directory` that returns only directories.\n\n", "tags": [], "source": null, "shortdoc": "Wrapper for `List Directory` that returns only directories.", "lineno": 1350}, {"name": "List Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "absolute", "kind": "POSITIONAL_OR_NAMED", "repr": "absolute=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Returns and logs items in a directory, optionally filtered with `pattern`.\n\n\nFile and directory names are returned in case-sensitive alphabetical order, e.g. `['A Name', 'Second', 'a lower case name', 'one more']`. Implicit directories `.` and `..` are not returned. The returned items are automatically logged.\n\n\nFile and directory names are returned relative to the given path (e.g. `'file.txt'`) by default. If you want them be returned in absolute format (e.g. `'/home/robot/file.txt'`), give the `absolute` argument a true value (see `Boolean arguments`).\n\n\nIf `pattern` is given, only items matching it are returned. The pattern is considered to be a *glob pattern* and the full syntax is explained in the `Glob patterns` section. With this keyword matching is always case-sensitive.\n\n\nExamples (using also other `List Directory` variants):\n\n\n|  |  |  |  |  |\n| :--- | :--- | :--- | :--- | :--- |\n| @{items} = | List Directory | ${TEMPDIR} |  |  |\n| @{files} = | List Files In Directory | /tmp | *.txt | absolute |\n| ${count} = | Count Files In Directory | ${CURDIR} | ??? |  |\n\n", "tags": [], "source": null, "shortdoc": "Returns and logs items in a directory, optionally filtered with `pattern`.", "lineno": 1315}, {"name": "List Files In Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "pattern", "kind": "POSITIONAL_OR_NAMED", "repr": "pattern=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}, {"name": "absolute", "kind": "POSITIONAL_OR_NAMED", "repr": "absolute=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Wrapper for `List Directory` that returns only files.\n\n", "tags": [], "source": null, "shortdoc": "Wrapper for `List Directory` that returns only files.", "lineno": 1343}, {"name": "Log Environment Variables", "args": [{"name": "level", "kind": "POSITIONAL_OR_NAMED", "repr": "level=INFO", "required": true, "defaultValue": "INFO", "types": [], "typedocs": []}], "doc": "Logs all environment variables using the given log level.\n\n\nEnvironment variables are also returned the same way as with `Get Environment Variables` keyword.\n\n", "tags": [], "source": null, "shortdoc": "Logs all environment variables using the given log level.", "lineno": 1060}, {"name": "Log File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "encoding", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding=UTF-8", "required": true, "defaultValue": "UTF-8", "types": [], "typedocs": []}, {"name": "encoding_errors", "kind": "POSITIONAL_OR_NAMED", "repr": "encoding_errors=strict", "required": true, "defaultValue": "strict", "types": [], "typedocs": []}], "doc": "Wrapper for `Get File` that also logs the returned file.\n\n\nThe file is logged with the INFO level. If you want something else, just use `Get File` and the built-in keyword `Log` with the desired level.\n\n\nSee `Get File` for more information about `encoding` and `encoding_errors` arguments.\n\n", "tags": [], "source": null, "shortdoc": "Wrapper for `Get File` that also logs the returned file.", "lineno": 358}, {"name": "Move Directory", "args": [{"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Moves the source directory into a destination.\n\n\nUses `Copy Directory` keyword internally, and `source` and `destination` arguments have exactly same semantics as with that keyword.\n\n", "tags": [], "source": null, "shortdoc": "Moves the source directory into a destination.", "lineno": 941}, {"name": "Move File", "args": [{"name": "source", "kind": "POSITIONAL_OR_NAMED", "repr": "source", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "destination", "kind": "POSITIONAL_OR_NAMED", "repr": "destination", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Moves the source file into the destination.\n\n\nArguments have exactly same semantics as with `Copy File` keyword. Destination file path is returned.\n\n\nIf the source and destination are on the same filesystem, rename operation is used. Otherwise file is copied to the destination filesystem and then removed from the original filesystem.\n\n\nSee also `Move Files`, `Copy File`, and `Copy Files`.\n\n", "tags": [], "source": null, "shortdoc": "Moves the source file into the destination.", "lineno": 846}, {"name": "Move Files", "args": [{"name": "@sources_and_destination", "kind": "VAR_POSITIONAL", "repr": "*sources_and_destination", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Moves specified files to the target directory.\n\n\nArguments have exactly same semantics as with `Copy Files` keyword.\n\n\nSee also `Move File`, `Copy File`, and `Copy Files`.\n\n", "tags": [], "source": null, "shortdoc": "Moves specified files to the target directory.", "lineno": 900}, {"name": "Normalize Path", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "case_normalize", "kind": "POSITIONAL_OR_NAMED", "repr": "case_normalize=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Normalizes the given path.\n\n\n- Collapses redundant separators and up-level references.\n- Converts `/` to `\\` on Windows.\n- Replaces initial `~` or `~user` by that user's home directory.\n- If `case_normalize` is given a true value (see `Boolean arguments`) on Windows, converts the path to all lowercase.\n- Converts `pathlib.Path` instances to `str`.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${path1} = | Normalize Path | abc/ |\n| ${path2} = | Normalize Path | abc/../def |\n| ${path3} = | Normalize Path | abc/./def//ghi |\n| ${path4} = | Normalize Path | ~robot/stuff |\n\n\n=>\n\n\n- ${path1} = 'abc'\n- ${path2} = 'def'\n- ${path3} = 'abc/def/ghi'\n- ${path4} = '/home/robot/stuff'\n\n\nOn Windows result would use `\\` instead of `/` and home directory would be different.\n\n", "tags": [], "source": null, "shortdoc": "Normalizes the given path.", "lineno": 1113}, {"name": "Remove Directory", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "recursive", "kind": "POSITIONAL_OR_NAMED", "repr": "recursive=False", "required": true, "defaultValue": "False", "types": [], "typedocs": []}], "doc": "Removes the directory pointed to by the given `path`.\n\n\nIf the second argument `recursive` is given a true value (see `Boolean arguments`), the directory is removed recursively. Otherwise removing fails if the directory is not empty.\n\n\nIf the directory pointed to by the `path` does not exist, the keyword passes, but it fails, if the `path` points to a file.\n\n", "tags": [], "source": null, "shortdoc": "Removes the directory pointed to by the given `path`.", "lineno": 713}, {"name": "Remove Environment Variable", "args": [{"name": "@names", "kind": "VAR_POSITIONAL", "repr": "*names", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Deletes the specified environment variable.\n\n\nDoes nothing if the environment variable is not set.\n\n\nIt is possible to remove multiple variables by passing them to this keyword as separate arguments.\n\n", "tags": [], "source": null, "shortdoc": "Deletes the specified environment variable.", "lineno": 1015}, {"name": "Remove File", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Removes a file with the given path.\n\n\nPasses if the file does not exist, but fails if the path does not point to a regular file (e.g. it points to a directory).\n\n\nThe path can be given as an exact path or as a glob pattern. See the `Glob patterns` section for details about the supported syntax. If the path is a pattern, all files matching it are removed.\n\n", "tags": [], "source": null, "shortdoc": "Removes a file with the given path.", "lineno": 653}, {"name": "Remove Files", "args": [{"name": "@paths", "kind": "VAR_POSITIONAL", "repr": "*paths", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Uses `Remove File` to remove multiple files one-by-one.\n\n\nExample:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Remove Files | ${TEMPDIR}${/}foo.txt | ${TEMPDIR}${/}bar.txt | ${TEMPDIR}${/}zap.txt |\n\n", "tags": [], "source": null, "shortdoc": "Uses `Remove File` to remove multiple files one-by-one.", "lineno": 673}, {"name": "Run", "args": [{"name": "command", "kind": "POSITIONAL_OR_NAMED", "repr": "command", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Runs the given command in the system and returns the output.\n\n\nThe execution status of the command **is not checked** by this keyword, and it must be done separately based on the returned output. If the execution return code is needed, either `Run And Return RC` or `Run And Return RC And Output` can be used.\n\n\nThe standard error stream is automatically redirected to the standard output stream by adding `2>&1` after the executed command. This automatic redirection is done only when the executed command does not contain additional output redirections. You can thus freely forward the standard error somewhere else, for example, like `my_command 2>stderr.txt`.\n\n\nThe returned output contains everything written into the standard output or error streams by the command (unless either of them is redirected explicitly). Many commands add an extra newline (`\\n`) after the output to make it easier to read in the console. To ease processing the returned output, this possible trailing newline is stripped by this keyword.\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${output} = | Run | ls -lhF /tmp |\n| Log | ${output} |  |\n| ${result} = | Run | ${CURDIR}${/}tester.py arg1 arg2 |\n| Should Not Contain | ${result} | FAIL |\n| ${stdout} = | Run | /opt/script.sh 2>/tmp/stderr.txt |\n| Should Be Equal | ${stdout} | TEST PASSED |\n| File Should Be Empty | /tmp/stderr.txt |  |\n\n\n**TIP:** `Run Process` keyword provided by the [Process library](http://robotframework.org/robotframework/latest/libraries/Process.html) supports better process configuration and is generally recommended as a replacement for this keyword.\n\n", "tags": [], "source": null, "shortdoc": "Runs the given command in the system and returns the output.", "lineno": 159}, {"name": "Run And Return Rc", "args": [{"name": "command", "kind": "POSITIONAL_OR_NAMED", "repr": "command", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Runs the given command in the system and returns the return code.\n\n\nThe return code (RC) is returned as a positive integer in range from 0 to 255 as returned by the executed command. On some operating systems (notable Windows) original return codes can be something else, but this keyword always maps them to the 0-255 range. Since the RC is an integer, it must be checked e.g. with the keyword `Should Be Equal As Integers` instead of `Should Be Equal` (both are built-in keywords).\n\n\nExamples:\n\n\n|  |  |  |\n| :--- | :--- | :--- |\n| ${rc} = | Run and Return RC | ${CURDIR}${/}script.py arg |\n| Should Be Equal As Integers | ${rc} | 0 |\n| ${rc} = | Run and Return RC | /path/to/example.rb arg1 arg2 |\n| Should Be True | 0 \\< ${rc} \\< 42 |  |\n\n\nSee `Run` and `Run And Return RC And Output` if you need to get the output of the executed command.\n\n\n**TIP:** `Run Process` keyword provided by the [Process library](http://robotframework.org/robotframework/latest/libraries/Process.html) supports better process configuration and is generally recommended as a replacement for this keyword.\n\n", "tags": [], "source": null, "shortdoc": "Runs the given command in the system and returns the return code.", "lineno": 197}, {"name": "Run And Return Rc And Output", "args": [{"name": "command", "kind": "POSITIONAL_OR_NAMED", "repr": "command", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Runs the given command in the system and returns the RC and output.\n\n\nThe return code (RC) is returned similarly as with `Run And Return RC` and the output similarly as with `Run`.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${rc} | ${output} = | Run and Return RC and Output | ${CURDIR}${/}mytool |\n| Should Be Equal As Integers | ${rc} | 0 |  |\n| Should Not Contain | ${output} | FAIL |  |\n| ${rc} | ${stdout} = | Run and Return RC and Output | /opt/script.sh 2>/tmp/stderr.txt |\n| Should Be True | ${rc} > 42 |  |  |\n| Should Be Equal | ${stdout} | TEST PASSED |  |\n| File Should Be Empty | /tmp/stderr.txt |  |  |\n\n\n**TIP:** `Run Process` keyword provided by the [Process library](http://robotframework.org/robotframework/latest/libraries/Process.html) supports better process configuration and is generally recommended as a replacement for this keyword.\n\n", "tags": [], "source": null, "shortdoc": "Runs the given command in the system and returns the RC and output.", "lineno": 224}, {"name": "Set Environment Variable", "args": [{"name": "name", "kind": "POSITIONAL_OR_NAMED", "repr": "name", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "value", "kind": "POSITIONAL_OR_NAMED", "repr": "value", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Sets an environment variable to a specified value.\n\n\nValues are converted to strings automatically. Set variables are automatically encoded using the system encoding.\n\n", "tags": [], "source": null, "shortdoc": "Sets an environment variable to a specified value.", "lineno": 973}, {"name": "Set Modified Time", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "mtime", "kind": "POSITIONAL_OR_NAMED", "repr": "mtime", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Sets the file modification and access times.\n\n\nChanges the modification and access times of the given file to the value determined by `mtime`. The time can be given in different formats described below. Note that all checks involving strings are case-insensitive. Modified time can only be set to regular files.\n\n\n1) If `mtime` is a number, or a string that can be converted to a number, it is interpreted as seconds since the UNIX epoch (1970-01-01 00:00:00 UTC). This documentation was originally written about 1177654467 seconds after the epoch.\n\n\n2) If `mtime` is a timestamp, that time will be used. Valid timestamp formats are `YYYY-MM-DD hh:mm:ss` and `YYYYMMDD hhmmss`.\n\n\n3) If `mtime` is equal to `NOW`, the current local time is used.\n\n\n4) If `mtime` is equal to `UTC`, the current time in [UTC](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) is used.\n\n\n5) If `mtime` is in the format like `NOW - 1 day` or `UTC + 1 hour 30 min`, the current local/UTC time plus/minus the time specified with the time string is used. The time string format is described in an appendix of Robot Framework User Guide.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| Set Modified Time | /path/file | 1177654467 | \\# Time given as epoch seconds |\n| Set Modified Time | /path/file | 2007-04-27 9:14:27 | \\# Time given as a timestamp |\n| Set Modified Time | /path/file | NOW | \\# The local time of execution |\n| Set Modified Time | /path/file | NOW - 1 day | \\# 1 day subtracted from the local time |\n| Set Modified Time | /path/file | UTC + 1h 2min 3s | \\# 1h 2min 3s added to the UTC time |\n\n", "tags": [], "source": null, "shortdoc": "Sets the file modification and access times.", "lineno": 1258}, {"name": "Should Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails unless the given path (file or directory) exists.\n\n\nThe path can be given as an exact path or as a glob pattern. See the `Glob patterns` section for details about the supported syntax.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails unless the given path (file or directory) exists.", "lineno": 374}, {"name": "Should Not Exist", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "msg", "kind": "POSITIONAL_OR_NAMED", "repr": "msg=None", "required": true, "defaultValue": "None", "types": [], "typedocs": []}], "doc": "Fails if the given path (file or directory) exists.\n\n\nThe path can be given as an exact path or as a glob pattern. See the `Glob patterns` section for details about the supported syntax.\n\n\nThe default error message can be overridden with the `msg` argument.\n\n", "tags": [], "source": null, "shortdoc": "Fails if the given path (file or directory) exists.", "lineno": 387}, {"name": "Split Extension", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Splits the extension from the given path.\n\n\nThe given path is first normalized (e.g. possible trailing path separators removed, special directories `..` and `.` removed). The base path and extension are returned as separate components so that the dot used as an extension separator is removed. If the path contains no extension, an empty string is returned for it. Possible leading and trailing dots in the file name are never considered to be extension separators.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${path} | ${ext} = | Split Extension | file.extension |\n| ${p2} | ${e2} = | Split Extension | path/file.ext |\n| ${p3} | ${e3} = | Split Extension | path/file |\n| ${p4} | ${e4} = | Split Extension | p1/../p2/file.ext |\n| ${p5} | ${e5} = | Split Extension | path/.file.ext |\n| ${p6} | ${e6} = | Split Extension | path/.file |\n\n\n=>\n\n\n- ${path} = 'file' & ${ext} = 'extension'\n- ${p2} = 'path/file' & ${e2} = 'ext'\n- ${p3} = 'path/file' & ${e3} = ''\n- ${p4} = 'p2/file' & ${e4} = 'ext'\n- ${p5} = 'path/.file' & ${e5} = 'ext'\n- ${p6} = 'path/.file' & ${e6} = ''\n\n", "tags": [], "source": null, "shortdoc": "Splits the extension from the given path.", "lineno": 1169}, {"name": "Split Path", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Splits the given path from the last path separator (`/` or `\\`).\n\n\nThe given path is first normalized (e.g. a possible trailing path separator is removed, special directories `..` and `.` removed). The parts that are split are returned as separate components.\n\n\nExamples:\n\n\n|  |  |  |  |\n| :--- | :--- | :--- | :--- |\n| ${path1} | ${dir} = | Split Path | abc/def |\n| ${path2} | ${file} = | Split Path | abc/def/ghi.txt |\n| ${path3} | ${d2}  = | Split Path | abc/../def/ghi/ |\n\n\n=>\n\n\n- ${path1} = 'abc' & ${dir} = 'def'\n- ${path2} = 'abc/def' & ${file} = 'ghi.txt'\n- ${path3} = 'def' & ${d2} = 'ghi'\n\n", "tags": [], "source": null, "shortdoc": "Splits the given path from the last path separator (`/` or `\\`).", "lineno": 1150}, {"name": "Touch", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}], "doc": "Emulates the UNIX touch command.\n\n\nCreates a file, if it does not exist. Otherwise changes its access and modification times to the current time.\n\n\nFails if used with the directories or the parent directory of the given file does not exist.\n\n", "tags": [], "source": null, "shortdoc": "Emulates the UNIX touch command.", "lineno": 1403}, {"name": "Wait Until Created", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout=1 minute", "required": true, "defaultValue": "1 minute", "types": [], "typedocs": []}], "doc": "Waits until the given file or directory is created.\n\n\nThe path can be given as an exact path or as a glob pattern. See the `Glob patterns` section for details about the supported syntax. If the path is a pattern, the keyword returns when an item matching it is created.\n\n\nThe optional `timeout` can be used to control the maximum time of waiting. The timeout is given as a timeout string, e.g. in a format `15 seconds`, `1min 10s` or just `10`. The time string format is described in an appendix of Robot Framework User Guide.\n\n\nIf the timeout is negative, the keyword is never timed-out. The keyword returns immediately, if the path already exists.\n\n", "tags": [], "source": null, "shortdoc": "Waits until the given file or directory is created.", "lineno": 496}, {"name": "Wait Until Removed", "args": [{"name": "path", "kind": "POSITIONAL_OR_NAMED", "repr": "path", "required": true, "defaultValue": null, "types": [], "typedocs": []}, {"name": "timeout", "kind": "POSITIONAL_OR_NAMED", "repr": "timeout=1 minute", "required": true, "defaultValue": "1 minute", "types": [], "typedocs": []}], "doc": "Waits until the given file or directory is removed.\n\n\nThe path can be given as an exact path or as a glob pattern. See the `Glob patterns` section for details about the supported syntax. If the path is a pattern, the keyword waits until all matching items are removed.\n\n\nThe optional `timeout` can be used to control the maximum time of waiting. The timeout is given as a timeout string, e.g. in a format `15 seconds`, `1min 10s` or just `10`. The time string format is described in an appendix of Robot Framework User Guide.\n\n\nIf the timeout is negative, the keyword is never timed-out. The keyword returns immediately, if the path does not exist in the first place.\n\n", "tags": [], "source": null, "shortdoc": "Waits until the given file or directory is removed.", "lineno": 470}], "dataTypes": {}, "typedocs": []}